2019-07-22 12:23:12 [Info] [main.go:40] [main.main] Initialize Logger ... Success !
2019-07-22 12:23:12 [Info] [main.go:49] [main.main] Load Configuration ... Success !
2019-07-22 12:23:12 [Debug] [app/utils/dbController.go:22] [app/utils.InitDB] Database Type : [sqlite3], Connect String : [./data/database/eccagent.db]
2019-07-22 12:23:12 [Info] [main.go:61] [main.main] Connect Database ... Success !
2019-07-22 12:23:12 [Info] [main.go:67] [main.main] Start Cron ... Success !
2019-07-22 12:25:13 [Info] [main.go:40] [main.main] Initialize Logger ... Success !
2019-07-22 12:25:13 [Info] [main.go:49] [main.main] Load Configuration ... Success !
2019-07-22 12:25:13 [Debug] [app/utils/dbController.go:22] [app/utils.InitDB] Database Type : [sqlite3], Connect String : [./data/database/eccagent.db]
2019-07-22 12:25:13 [Info] [main.go:61] [main.main] Connect Database ... Success !
2019-07-22 12:25:13 [Info] [main.go:67] [main.main] Start Cron ... Success !
2019-07-22 12:25:39 [Info] [main.go:40] [main.main] Initialize Logger ... Success !
2019-07-22 12:25:39 [Info] [main.go:49] [main.main] Load Configuration ... Success !
2019-07-22 12:25:39 [Debug] [app/utils/dbController.go:22] [app/utils.InitDB] Database Type : [sqlite3], Connect String : [./data/database/eccagent.db]
2019-07-22 12:25:39 [Info] [main.go:61] [main.main] Connect Database ... Success !
2019-07-22 12:25:39 [Info] [main.go:68] [main.main] Start Cron ... Success !
2019-07-22 12:29:26 [Info] [main.go:41] [main.main] Initialize Logger ... Success !
2019-07-22 12:29:26 [Info] [main.go:50] [main.main] Load Configuration ... Success !
2019-07-22 12:29:26 [Debug] [app/utils/dbController.go:22] [app/utils.InitDB] Database Type : [sqlite3], Connect String : [./data/database/eccagent.db]
2019-07-22 12:29:26 [Info] [main.go:62] [main.main] Connect Database ... Success !
2019-07-22 12:29:26 [Info] [main.go:72] [main.main] Start Cron ... Success !
2019-07-22 12:29:26 [Info] [main.go:73] [main.main] 5 -> Starting HTTP Server !
2019-07-22 12:29:26 [Info] [main.go:75] [main.main] ***Everything is OK !***
2019-07-22 12:29:26 [Info] [app/httpsvr/server.go:23] [app/httpsvr.StartHTTP] Initialize HTTP Routers Success !
2019-07-22 12:29:26 [Info] [app/httpsvr/server.go:30] [app/httpsvr.StartHTTP] Listen HTTP Port And Serve ...
2019-07-22 12:30:48 [Info] [main.go:41] [main.main] Initialize Logger ... Success !
2019-07-22 12:30:48 [Info] [main.go:50] [main.main] Load Configuration ... Success !
2019-07-22 12:30:48 [Debug] [app/utils/dbController.go:22] [app/utils.InitDB] Database Type : [sqlite3], Connect String : [./data/database/eccagent.db]
2019-07-22 12:30:48 [Info] [main.go:62] [main.main] Connect Database ... Success !
2019-07-22 12:30:48 [Info] [main.go:72] [main.main] Start Cron ... Success !
2019-07-22 12:30:48 [Info] [main.go:73] [main.main] 5 -> Starting HTTP Server !
2019-07-22 12:30:48 [Info] [main.go:75] [main.main] ***Everything is OK !***
2019-07-22 12:30:48 [Info] [app/httpsvr/server.go:23] [app/httpsvr.StartHTTP] Initialize HTTP Routers Success !
2019-07-22 12:30:48 [Info] [app/httpsvr/server.go:30] [app/httpsvr.StartHTTP] Listen HTTP Port And Serve ...
2019-07-22 12:31:14 [Info] [main.go:41] [main.main] Initialize Logger ... Success !
2019-07-22 12:31:14 [Info] [main.go:50] [main.main] Load Configuration ... Success !
2019-07-22 12:31:14 [Debug] [app/utils/dbController.go:22] [app/utils.InitDB] Database Type : [sqlite3], Connect String : [./data/database/eccagent.db]
2019-07-22 12:31:14 [Info] [main.go:62] [main.main] Connect Database ... Success !
2019-07-22 12:31:14 [Debug] [app/scheduler/cron.go:27] [app/scheduler.InitCron] Cron Job 0 : {1 检查http://localhost:5678/test URL */10 * * * * *  http://localhost:5678/test  启用 http://localhost:5678/test}
2019-07-22 12:31:14 [Trace] [app/scheduler/cron.go:65] [app/scheduler.InitCron] URL
2019-07-22 12:31:15 [Debug] [app/scheduler/cron.go:27] [app/scheduler.InitCron] Cron Job 1 : {2 检查http://localhost:9999/debug/pprof URL */5 * * * * *  http://localhost:9999/debug/pprof  启用 http://localhost:9999/debug/pprof}
2019-07-22 12:31:15 [Trace] [app/scheduler/cron.go:65] [app/scheduler.InitCron] URL
2019-07-22 12:31:15 [Info] [main.go:72] [main.main] Start Cron ... Success !
2019-07-22 12:31:15 [Info] [main.go:73] [main.main] 5 -> Starting HTTP Server !
2019-07-22 12:31:15 [Info] [main.go:75] [main.main] ***Everything is OK !***
2019-07-22 12:31:15 [Info] [app/httpsvr/server.go:23] [app/httpsvr.StartHTTP] Initialize HTTP Routers Success !
2019-07-22 12:31:15 [Info] [app/httpsvr/server.go:30] [app/httpsvr.StartHTTP] Listen HTTP Port And Serve ...
2019-07-22 12:31:20 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:31:20 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:31:20 [Trace] [app/scheduler/url.go:48] [app/scheduler.CheckUrl] <html>
<head>
<title>/debug/pprof/</title>
<style>
.profile-name{
	display:inline-block;
	width:6rem;
}
</style>
</head>
<body>
/debug/pprof/<br>
<br>
Types of profiles available:
<table>
<thead><td>Count</td><td>Profile</td></thead>

	<tr>
	<td>1</td><td><a href=allocs?debug&#61;1>allocs</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=block?debug&#61;1>block</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=cmdline>cmdline</a></td>
	</tr>

	<tr>
	<td>18</td><td><a href=goroutine?debug&#61;1>goroutine</a></td>
	</tr>

	<tr>
	<td>1</td><td><a href=heap?debug&#61;1>heap</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=mutex?debug&#61;1>mutex</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=profile>profile</a></td>
	</tr>

	<tr>
	<td>12</td><td><a href=threadcreate?debug&#61;1>threadcreate</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=trace>trace</a></td>
	</tr>

</table>
<a href="goroutine?debug=2">full goroutine stack dump</a>
<br/>
<p>
Profile Descriptions:
<ul>

<li><div class=profile-name>allocs:</div> A sampling of all past memory allocations</li>

<li><div class=profile-name>block:</div> Stack traces that led to blocking on synchronization primitives</li>

<li><div class=profile-name>cmdline:</div> The command line invocation of the current program</li>

<li><div class=profile-name>goroutine:</div> Stack traces of all current goroutines</li>

<li><div class=profile-name>heap:</div> A sampling of memory allocations of live objects. You can specify the gc GET parameter to run GC before taking the heap sample.</li>

<li><div class=profile-name>mutex:</div> Stack traces of holders of contended mutexes</li>

<li><div class=profile-name>profile:</div> CPU profile. You can specify the duration in the seconds GET parameter. After you get the profile file, use the go tool pprof command to investigate the profile.</li>

<li><div class=profile-name>threadcreate:</div> Stack traces that led to the creation of new OS threads</li>

<li><div class=profile-name>trace:</div> A trace of execution of the current program. You can specify the duration in the seconds GET parameter. After you get the trace file, use the go tool trace command to investigate the trace.</li>

</ul>
</p>
</body>
</html>

2019-07-22 12:31:20 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> HTTP Status Code : 200 <<<
2019-07-22 12:31:21 [Error] [app/scheduler/url.go:36] [app/scheduler.CheckUrl] ERROR : Get http://localhost:5678/test: dial tcp [::1]:5678: connectex: No connection could be made because the target machine actively refused it.
2019-07-22 12:31:25 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:31:25 [Trace] [app/scheduler/url.go:48] [app/scheduler.CheckUrl] <html>
<head>
<title>/debug/pprof/</title>
<style>
.profile-name{
	display:inline-block;
	width:6rem;
}
</style>
</head>
<body>
/debug/pprof/<br>
<br>
Types of profiles available:
<table>
<thead><td>Count</td><td>Profile</td></thead>

	<tr>
	<td>1</td><td><a href=allocs?debug&#61;1>allocs</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=block?debug&#61;1>block</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=cmdline>cmdline</a></td>
	</tr>

	<tr>
	<td>14</td><td><a href=goroutine?debug&#61;1>goroutine</a></td>
	</tr>

	<tr>
	<td>1</td><td><a href=heap?debug&#61;1>heap</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=mutex?debug&#61;1>mutex</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=profile>profile</a></td>
	</tr>

	<tr>
	<td>12</td><td><a href=threadcreate?debug&#61;1>threadcreate</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=trace>trace</a></td>
	</tr>

</table>
<a href="goroutine?debug=2">full goroutine stack dump</a>
<br/>
<p>
Profile Descriptions:
<ul>

<li><div class=profile-name>allocs:</div> A sampling of all past memory allocations</li>

<li><div class=profile-name>block:</div> Stack traces that led to blocking on synchronization primitives</li>

<li><div class=profile-name>cmdline:</div> The command line invocation of the current program</li>

<li><div class=profile-name>goroutine:</div> Stack traces of all current goroutines</li>

<li><div class=profile-name>heap:</div> A sampling of memory allocations of live objects. You can specify the gc GET parameter to run GC before taking the heap sample.</li>

<li><div class=profile-name>mutex:</div> Stack traces of holders of contended mutexes</li>

<li><div class=profile-name>profile:</div> CPU profile. You can specify the duration in the seconds GET parameter. After you get the profile file, use the go tool pprof command to investigate the profile.</li>

<li><div class=profile-name>threadcreate:</div> Stack traces that led to the creation of new OS threads</li>

<li><div class=profile-name>trace:</div> A trace of execution of the current program. You can specify the duration in the seconds GET parameter. After you get the trace file, use the go tool trace command to investigate the trace.</li>

</ul>
</p>
</body>
</html>

2019-07-22 12:31:25 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> HTTP Status Code : 200 <<<
2019-07-22 12:31:30 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:31:30 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:31:30 [Trace] [app/scheduler/url.go:48] [app/scheduler.CheckUrl] <html>
<head>
<title>/debug/pprof/</title>
<style>
.profile-name{
	display:inline-block;
	width:6rem;
}
</style>
</head>
<body>
/debug/pprof/<br>
<br>
Types of profiles available:
<table>
<thead><td>Count</td><td>Profile</td></thead>

	<tr>
	<td>1</td><td><a href=allocs?debug&#61;1>allocs</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=block?debug&#61;1>block</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=cmdline>cmdline</a></td>
	</tr>

	<tr>
	<td>18</td><td><a href=goroutine?debug&#61;1>goroutine</a></td>
	</tr>

	<tr>
	<td>1</td><td><a href=heap?debug&#61;1>heap</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=mutex?debug&#61;1>mutex</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=profile>profile</a></td>
	</tr>

	<tr>
	<td>12</td><td><a href=threadcreate?debug&#61;1>threadcreate</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=trace>trace</a></td>
	</tr>

</table>
<a href="goroutine?debug=2">full goroutine stack dump</a>
<br/>
<p>
Profile Descriptions:
<ul>

<li><div class=profile-name>allocs:</div> A sampling of all past memory allocations</li>

<li><div class=profile-name>block:</div> Stack traces that led to blocking on synchronization primitives</li>

<li><div class=profile-name>cmdline:</div> The command line invocation of the current program</li>

<li><div class=profile-name>goroutine:</div> Stack traces of all current goroutines</li>

<li><div class=profile-name>heap:</div> A sampling of memory allocations of live objects. You can specify the gc GET parameter to run GC before taking the heap sample.</li>

<li><div class=profile-name>mutex:</div> Stack traces of holders of contended mutexes</li>

<li><div class=profile-name>profile:</div> CPU profile. You can specify the duration in the seconds GET parameter. After you get the profile file, use the go tool pprof command to investigate the profile.</li>

<li><div class=profile-name>threadcreate:</div> Stack traces that led to the creation of new OS threads</li>

<li><div class=profile-name>trace:</div> A trace of execution of the current program. You can specify the duration in the seconds GET parameter. After you get the trace file, use the go tool trace command to investigate the trace.</li>

</ul>
</p>
</body>
</html>

2019-07-22 12:31:30 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> HTTP Status Code : 200 <<<
2019-07-22 12:31:31 [Error] [app/scheduler/url.go:36] [app/scheduler.CheckUrl] ERROR : Get http://localhost:5678/test: dial tcp [::1]:5678: connectex: No connection could be made because the target machine actively refused it.
2019-07-22 12:31:35 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:31:35 [Trace] [app/scheduler/url.go:48] [app/scheduler.CheckUrl] <html>
<head>
<title>/debug/pprof/</title>
<style>
.profile-name{
	display:inline-block;
	width:6rem;
}
</style>
</head>
<body>
/debug/pprof/<br>
<br>
Types of profiles available:
<table>
<thead><td>Count</td><td>Profile</td></thead>

	<tr>
	<td>1</td><td><a href=allocs?debug&#61;1>allocs</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=block?debug&#61;1>block</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=cmdline>cmdline</a></td>
	</tr>

	<tr>
	<td>14</td><td><a href=goroutine?debug&#61;1>goroutine</a></td>
	</tr>

	<tr>
	<td>1</td><td><a href=heap?debug&#61;1>heap</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=mutex?debug&#61;1>mutex</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=profile>profile</a></td>
	</tr>

	<tr>
	<td>12</td><td><a href=threadcreate?debug&#61;1>threadcreate</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=trace>trace</a></td>
	</tr>

</table>
<a href="goroutine?debug=2">full goroutine stack dump</a>
<br/>
<p>
Profile Descriptions:
<ul>

<li><div class=profile-name>allocs:</div> A sampling of all past memory allocations</li>

<li><div class=profile-name>block:</div> Stack traces that led to blocking on synchronization primitives</li>

<li><div class=profile-name>cmdline:</div> The command line invocation of the current program</li>

<li><div class=profile-name>goroutine:</div> Stack traces of all current goroutines</li>

<li><div class=profile-name>heap:</div> A sampling of memory allocations of live objects. You can specify the gc GET parameter to run GC before taking the heap sample.</li>

<li><div class=profile-name>mutex:</div> Stack traces of holders of contended mutexes</li>

<li><div class=profile-name>profile:</div> CPU profile. You can specify the duration in the seconds GET parameter. After you get the profile file, use the go tool pprof command to investigate the profile.</li>

<li><div class=profile-name>threadcreate:</div> Stack traces that led to the creation of new OS threads</li>

<li><div class=profile-name>trace:</div> A trace of execution of the current program. You can specify the duration in the seconds GET parameter. After you get the trace file, use the go tool trace command to investigate the trace.</li>

</ul>
</p>
</body>
</html>

2019-07-22 12:31:35 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> HTTP Status Code : 200 <<<
2019-07-22 12:31:40 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:31:40 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:31:40 [Trace] [app/scheduler/url.go:48] [app/scheduler.CheckUrl] <html>
<head>
<title>/debug/pprof/</title>
<style>
.profile-name{
	display:inline-block;
	width:6rem;
}
</style>
</head>
<body>
/debug/pprof/<br>
<br>
Types of profiles available:
<table>
<thead><td>Count</td><td>Profile</td></thead>

	<tr>
	<td>1</td><td><a href=allocs?debug&#61;1>allocs</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=block?debug&#61;1>block</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=cmdline>cmdline</a></td>
	</tr>

	<tr>
	<td>18</td><td><a href=goroutine?debug&#61;1>goroutine</a></td>
	</tr>

	<tr>
	<td>1</td><td><a href=heap?debug&#61;1>heap</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=mutex?debug&#61;1>mutex</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=profile>profile</a></td>
	</tr>

	<tr>
	<td>12</td><td><a href=threadcreate?debug&#61;1>threadcreate</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=trace>trace</a></td>
	</tr>

</table>
<a href="goroutine?debug=2">full goroutine stack dump</a>
<br/>
<p>
Profile Descriptions:
<ul>

<li><div class=profile-name>allocs:</div> A sampling of all past memory allocations</li>

<li><div class=profile-name>block:</div> Stack traces that led to blocking on synchronization primitives</li>

<li><div class=profile-name>cmdline:</div> The command line invocation of the current program</li>

<li><div class=profile-name>goroutine:</div> Stack traces of all current goroutines</li>

<li><div class=profile-name>heap:</div> A sampling of memory allocations of live objects. You can specify the gc GET parameter to run GC before taking the heap sample.</li>

<li><div class=profile-name>mutex:</div> Stack traces of holders of contended mutexes</li>

<li><div class=profile-name>profile:</div> CPU profile. You can specify the duration in the seconds GET parameter. After you get the profile file, use the go tool pprof command to investigate the profile.</li>

<li><div class=profile-name>threadcreate:</div> Stack traces that led to the creation of new OS threads</li>

<li><div class=profile-name>trace:</div> A trace of execution of the current program. You can specify the duration in the seconds GET parameter. After you get the trace file, use the go tool trace command to investigate the trace.</li>

</ul>
</p>
</body>
</html>

2019-07-22 12:31:40 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> HTTP Status Code : 200 <<<
2019-07-22 12:31:41 [Error] [app/scheduler/url.go:36] [app/scheduler.CheckUrl] ERROR : Get http://localhost:5678/test: dial tcp [::1]:5678: connectex: No connection could be made because the target machine actively refused it.
2019-07-22 12:31:45 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:31:45 [Trace] [app/scheduler/url.go:48] [app/scheduler.CheckUrl] <html>
<head>
<title>/debug/pprof/</title>
<style>
.profile-name{
	display:inline-block;
	width:6rem;
}
</style>
</head>
<body>
/debug/pprof/<br>
<br>
Types of profiles available:
<table>
<thead><td>Count</td><td>Profile</td></thead>

	<tr>
	<td>1</td><td><a href=allocs?debug&#61;1>allocs</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=block?debug&#61;1>block</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=cmdline>cmdline</a></td>
	</tr>

	<tr>
	<td>14</td><td><a href=goroutine?debug&#61;1>goroutine</a></td>
	</tr>

	<tr>
	<td>1</td><td><a href=heap?debug&#61;1>heap</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=mutex?debug&#61;1>mutex</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=profile>profile</a></td>
	</tr>

	<tr>
	<td>12</td><td><a href=threadcreate?debug&#61;1>threadcreate</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=trace>trace</a></td>
	</tr>

</table>
<a href="goroutine?debug=2">full goroutine stack dump</a>
<br/>
<p>
Profile Descriptions:
<ul>

<li><div class=profile-name>allocs:</div> A sampling of all past memory allocations</li>

<li><div class=profile-name>block:</div> Stack traces that led to blocking on synchronization primitives</li>

<li><div class=profile-name>cmdline:</div> The command line invocation of the current program</li>

<li><div class=profile-name>goroutine:</div> Stack traces of all current goroutines</li>

<li><div class=profile-name>heap:</div> A sampling of memory allocations of live objects. You can specify the gc GET parameter to run GC before taking the heap sample.</li>

<li><div class=profile-name>mutex:</div> Stack traces of holders of contended mutexes</li>

<li><div class=profile-name>profile:</div> CPU profile. You can specify the duration in the seconds GET parameter. After you get the profile file, use the go tool pprof command to investigate the profile.</li>

<li><div class=profile-name>threadcreate:</div> Stack traces that led to the creation of new OS threads</li>

<li><div class=profile-name>trace:</div> A trace of execution of the current program. You can specify the duration in the seconds GET parameter. After you get the trace file, use the go tool trace command to investigate the trace.</li>

</ul>
</p>
</body>
</html>

2019-07-22 12:31:45 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> HTTP Status Code : 200 <<<
2019-07-22 12:31:50 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:31:50 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:31:50 [Trace] [app/scheduler/url.go:48] [app/scheduler.CheckUrl] <html>
<head>
<title>/debug/pprof/</title>
<style>
.profile-name{
	display:inline-block;
	width:6rem;
}
</style>
</head>
<body>
/debug/pprof/<br>
<br>
Types of profiles available:
<table>
<thead><td>Count</td><td>Profile</td></thead>

	<tr>
	<td>2</td><td><a href=allocs?debug&#61;1>allocs</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=block?debug&#61;1>block</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=cmdline>cmdline</a></td>
	</tr>

	<tr>
	<td>18</td><td><a href=goroutine?debug&#61;1>goroutine</a></td>
	</tr>

	<tr>
	<td>2</td><td><a href=heap?debug&#61;1>heap</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=mutex?debug&#61;1>mutex</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=profile>profile</a></td>
	</tr>

	<tr>
	<td>12</td><td><a href=threadcreate?debug&#61;1>threadcreate</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=trace>trace</a></td>
	</tr>

</table>
<a href="goroutine?debug=2">full goroutine stack dump</a>
<br/>
<p>
Profile Descriptions:
<ul>

<li><div class=profile-name>allocs:</div> A sampling of all past memory allocations</li>

<li><div class=profile-name>block:</div> Stack traces that led to blocking on synchronization primitives</li>

<li><div class=profile-name>cmdline:</div> The command line invocation of the current program</li>

<li><div class=profile-name>goroutine:</div> Stack traces of all current goroutines</li>

<li><div class=profile-name>heap:</div> A sampling of memory allocations of live objects. You can specify the gc GET parameter to run GC before taking the heap sample.</li>

<li><div class=profile-name>mutex:</div> Stack traces of holders of contended mutexes</li>

<li><div class=profile-name>profile:</div> CPU profile. You can specify the duration in the seconds GET parameter. After you get the profile file, use the go tool pprof command to investigate the profile.</li>

<li><div class=profile-name>threadcreate:</div> Stack traces that led to the creation of new OS threads</li>

<li><div class=profile-name>trace:</div> A trace of execution of the current program. You can specify the duration in the seconds GET parameter. After you get the trace file, use the go tool trace command to investigate the trace.</li>

</ul>
</p>
</body>
</html>

2019-07-22 12:31:50 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> HTTP Status Code : 200 <<<
2019-07-22 12:31:51 [Error] [app/scheduler/url.go:36] [app/scheduler.CheckUrl] ERROR : Get http://localhost:5678/test: dial tcp [::1]:5678: connectex: No connection could be made because the target machine actively refused it.
2019-07-22 12:31:55 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:31:55 [Trace] [app/scheduler/url.go:48] [app/scheduler.CheckUrl] <html>
<head>
<title>/debug/pprof/</title>
<style>
.profile-name{
	display:inline-block;
	width:6rem;
}
</style>
</head>
<body>
/debug/pprof/<br>
<br>
Types of profiles available:
<table>
<thead><td>Count</td><td>Profile</td></thead>

	<tr>
	<td>2</td><td><a href=allocs?debug&#61;1>allocs</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=block?debug&#61;1>block</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=cmdline>cmdline</a></td>
	</tr>

	<tr>
	<td>14</td><td><a href=goroutine?debug&#61;1>goroutine</a></td>
	</tr>

	<tr>
	<td>2</td><td><a href=heap?debug&#61;1>heap</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=mutex?debug&#61;1>mutex</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=profile>profile</a></td>
	</tr>

	<tr>
	<td>12</td><td><a href=threadcreate?debug&#61;1>threadcreate</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=trace>trace</a></td>
	</tr>

</table>
<a href="goroutine?debug=2">full goroutine stack dump</a>
<br/>
<p>
Profile Descriptions:
<ul>

<li><div class=profile-name>allocs:</div> A sampling of all past memory allocations</li>

<li><div class=profile-name>block:</div> Stack traces that led to blocking on synchronization primitives</li>

<li><div class=profile-name>cmdline:</div> The command line invocation of the current program</li>

<li><div class=profile-name>goroutine:</div> Stack traces of all current goroutines</li>

<li><div class=profile-name>heap:</div> A sampling of memory allocations of live objects. You can specify the gc GET parameter to run GC before taking the heap sample.</li>

<li><div class=profile-name>mutex:</div> Stack traces of holders of contended mutexes</li>

<li><div class=profile-name>profile:</div> CPU profile. You can specify the duration in the seconds GET parameter. After you get the profile file, use the go tool pprof command to investigate the profile.</li>

<li><div class=profile-name>threadcreate:</div> Stack traces that led to the creation of new OS threads</li>

<li><div class=profile-name>trace:</div> A trace of execution of the current program. You can specify the duration in the seconds GET parameter. After you get the trace file, use the go tool trace command to investigate the trace.</li>

</ul>
</p>
</body>
</html>

2019-07-22 12:31:55 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> HTTP Status Code : 200 <<<
2019-07-22 12:32:00 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:32:00 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:32:00 [Trace] [app/scheduler/url.go:48] [app/scheduler.CheckUrl] <html>
<head>
<title>/debug/pprof/</title>
<style>
.profile-name{
	display:inline-block;
	width:6rem;
}
</style>
</head>
<body>
/debug/pprof/<br>
<br>
Types of profiles available:
<table>
<thead><td>Count</td><td>Profile</td></thead>

	<tr>
	<td>3</td><td><a href=allocs?debug&#61;1>allocs</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=block?debug&#61;1>block</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=cmdline>cmdline</a></td>
	</tr>

	<tr>
	<td>18</td><td><a href=goroutine?debug&#61;1>goroutine</a></td>
	</tr>

	<tr>
	<td>3</td><td><a href=heap?debug&#61;1>heap</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=mutex?debug&#61;1>mutex</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=profile>profile</a></td>
	</tr>

	<tr>
	<td>12</td><td><a href=threadcreate?debug&#61;1>threadcreate</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=trace>trace</a></td>
	</tr>

</table>
<a href="goroutine?debug=2">full goroutine stack dump</a>
<br/>
<p>
Profile Descriptions:
<ul>

<li><div class=profile-name>allocs:</div> A sampling of all past memory allocations</li>

<li><div class=profile-name>block:</div> Stack traces that led to blocking on synchronization primitives</li>

<li><div class=profile-name>cmdline:</div> The command line invocation of the current program</li>

<li><div class=profile-name>goroutine:</div> Stack traces of all current goroutines</li>

<li><div class=profile-name>heap:</div> A sampling of memory allocations of live objects. You can specify the gc GET parameter to run GC before taking the heap sample.</li>

<li><div class=profile-name>mutex:</div> Stack traces of holders of contended mutexes</li>

<li><div class=profile-name>profile:</div> CPU profile. You can specify the duration in the seconds GET parameter. After you get the profile file, use the go tool pprof command to investigate the profile.</li>

<li><div class=profile-name>threadcreate:</div> Stack traces that led to the creation of new OS threads</li>

<li><div class=profile-name>trace:</div> A trace of execution of the current program. You can specify the duration in the seconds GET parameter. After you get the trace file, use the go tool trace command to investigate the trace.</li>

</ul>
</p>
</body>
</html>

2019-07-22 12:32:00 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> HTTP Status Code : 200 <<<
2019-07-22 12:32:01 [Error] [app/scheduler/url.go:36] [app/scheduler.CheckUrl] ERROR : Get http://localhost:5678/test: dial tcp [::1]:5678: connectex: No connection could be made because the target machine actively refused it.
2019-07-22 12:32:05 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:32:05 [Trace] [app/scheduler/url.go:48] [app/scheduler.CheckUrl] <html>
<head>
<title>/debug/pprof/</title>
<style>
.profile-name{
	display:inline-block;
	width:6rem;
}
</style>
</head>
<body>
/debug/pprof/<br>
<br>
Types of profiles available:
<table>
<thead><td>Count</td><td>Profile</td></thead>

	<tr>
	<td>3</td><td><a href=allocs?debug&#61;1>allocs</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=block?debug&#61;1>block</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=cmdline>cmdline</a></td>
	</tr>

	<tr>
	<td>14</td><td><a href=goroutine?debug&#61;1>goroutine</a></td>
	</tr>

	<tr>
	<td>3</td><td><a href=heap?debug&#61;1>heap</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=mutex?debug&#61;1>mutex</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=profile>profile</a></td>
	</tr>

	<tr>
	<td>12</td><td><a href=threadcreate?debug&#61;1>threadcreate</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=trace>trace</a></td>
	</tr>

</table>
<a href="goroutine?debug=2">full goroutine stack dump</a>
<br/>
<p>
Profile Descriptions:
<ul>

<li><div class=profile-name>allocs:</div> A sampling of all past memory allocations</li>

<li><div class=profile-name>block:</div> Stack traces that led to blocking on synchronization primitives</li>

<li><div class=profile-name>cmdline:</div> The command line invocation of the current program</li>

<li><div class=profile-name>goroutine:</div> Stack traces of all current goroutines</li>

<li><div class=profile-name>heap:</div> A sampling of memory allocations of live objects. You can specify the gc GET parameter to run GC before taking the heap sample.</li>

<li><div class=profile-name>mutex:</div> Stack traces of holders of contended mutexes</li>

<li><div class=profile-name>profile:</div> CPU profile. You can specify the duration in the seconds GET parameter. After you get the profile file, use the go tool pprof command to investigate the profile.</li>

<li><div class=profile-name>threadcreate:</div> Stack traces that led to the creation of new OS threads</li>

<li><div class=profile-name>trace:</div> A trace of execution of the current program. You can specify the duration in the seconds GET parameter. After you get the trace file, use the go tool trace command to investigate the trace.</li>

</ul>
</p>
</body>
</html>

2019-07-22 12:32:05 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> HTTP Status Code : 200 <<<
2019-07-22 12:32:10 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:32:10 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:32:10 [Trace] [app/scheduler/url.go:48] [app/scheduler.CheckUrl] <html>
<head>
<title>/debug/pprof/</title>
<style>
.profile-name{
	display:inline-block;
	width:6rem;
}
</style>
</head>
<body>
/debug/pprof/<br>
<br>
Types of profiles available:
<table>
<thead><td>Count</td><td>Profile</td></thead>

	<tr>
	<td>3</td><td><a href=allocs?debug&#61;1>allocs</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=block?debug&#61;1>block</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=cmdline>cmdline</a></td>
	</tr>

	<tr>
	<td>18</td><td><a href=goroutine?debug&#61;1>goroutine</a></td>
	</tr>

	<tr>
	<td>3</td><td><a href=heap?debug&#61;1>heap</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=mutex?debug&#61;1>mutex</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=profile>profile</a></td>
	</tr>

	<tr>
	<td>12</td><td><a href=threadcreate?debug&#61;1>threadcreate</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=trace>trace</a></td>
	</tr>

</table>
<a href="goroutine?debug=2">full goroutine stack dump</a>
<br/>
<p>
Profile Descriptions:
<ul>

<li><div class=profile-name>allocs:</div> A sampling of all past memory allocations</li>

<li><div class=profile-name>block:</div> Stack traces that led to blocking on synchronization primitives</li>

<li><div class=profile-name>cmdline:</div> The command line invocation of the current program</li>

<li><div class=profile-name>goroutine:</div> Stack traces of all current goroutines</li>

<li><div class=profile-name>heap:</div> A sampling of memory allocations of live objects. You can specify the gc GET parameter to run GC before taking the heap sample.</li>

<li><div class=profile-name>mutex:</div> Stack traces of holders of contended mutexes</li>

<li><div class=profile-name>profile:</div> CPU profile. You can specify the duration in the seconds GET parameter. After you get the profile file, use the go tool pprof command to investigate the profile.</li>

<li><div class=profile-name>threadcreate:</div> Stack traces that led to the creation of new OS threads</li>

<li><div class=profile-name>trace:</div> A trace of execution of the current program. You can specify the duration in the seconds GET parameter. After you get the trace file, use the go tool trace command to investigate the trace.</li>

</ul>
</p>
</body>
</html>

2019-07-22 12:32:10 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> HTTP Status Code : 200 <<<
2019-07-22 12:32:11 [Error] [app/scheduler/url.go:36] [app/scheduler.CheckUrl] ERROR : Get http://localhost:5678/test: dial tcp [::1]:5678: connectex: No connection could be made because the target machine actively refused it.
2019-07-22 12:32:15 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:32:15 [Trace] [app/scheduler/url.go:48] [app/scheduler.CheckUrl] <html>
<head>
<title>/debug/pprof/</title>
<style>
.profile-name{
	display:inline-block;
	width:6rem;
}
</style>
</head>
<body>
/debug/pprof/<br>
<br>
Types of profiles available:
<table>
<thead><td>Count</td><td>Profile</td></thead>

	<tr>
	<td>3</td><td><a href=allocs?debug&#61;1>allocs</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=block?debug&#61;1>block</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=cmdline>cmdline</a></td>
	</tr>

	<tr>
	<td>14</td><td><a href=goroutine?debug&#61;1>goroutine</a></td>
	</tr>

	<tr>
	<td>3</td><td><a href=heap?debug&#61;1>heap</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=mutex?debug&#61;1>mutex</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=profile>profile</a></td>
	</tr>

	<tr>
	<td>12</td><td><a href=threadcreate?debug&#61;1>threadcreate</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=trace>trace</a></td>
	</tr>

</table>
<a href="goroutine?debug=2">full goroutine stack dump</a>
<br/>
<p>
Profile Descriptions:
<ul>

<li><div class=profile-name>allocs:</div> A sampling of all past memory allocations</li>

<li><div class=profile-name>block:</div> Stack traces that led to blocking on synchronization primitives</li>

<li><div class=profile-name>cmdline:</div> The command line invocation of the current program</li>

<li><div class=profile-name>goroutine:</div> Stack traces of all current goroutines</li>

<li><div class=profile-name>heap:</div> A sampling of memory allocations of live objects. You can specify the gc GET parameter to run GC before taking the heap sample.</li>

<li><div class=profile-name>mutex:</div> Stack traces of holders of contended mutexes</li>

<li><div class=profile-name>profile:</div> CPU profile. You can specify the duration in the seconds GET parameter. After you get the profile file, use the go tool pprof command to investigate the profile.</li>

<li><div class=profile-name>threadcreate:</div> Stack traces that led to the creation of new OS threads</li>

<li><div class=profile-name>trace:</div> A trace of execution of the current program. You can specify the duration in the seconds GET parameter. After you get the trace file, use the go tool trace command to investigate the trace.</li>

</ul>
</p>
</body>
</html>

2019-07-22 12:32:15 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> HTTP Status Code : 200 <<<
2019-07-22 12:32:20 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:32:20 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:32:20 [Trace] [app/scheduler/url.go:48] [app/scheduler.CheckUrl] <html>
<head>
<title>/debug/pprof/</title>
<style>
.profile-name{
	display:inline-block;
	width:6rem;
}
</style>
</head>
<body>
/debug/pprof/<br>
<br>
Types of profiles available:
<table>
<thead><td>Count</td><td>Profile</td></thead>

	<tr>
	<td>3</td><td><a href=allocs?debug&#61;1>allocs</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=block?debug&#61;1>block</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=cmdline>cmdline</a></td>
	</tr>

	<tr>
	<td>18</td><td><a href=goroutine?debug&#61;1>goroutine</a></td>
	</tr>

	<tr>
	<td>3</td><td><a href=heap?debug&#61;1>heap</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=mutex?debug&#61;1>mutex</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=profile>profile</a></td>
	</tr>

	<tr>
	<td>12</td><td><a href=threadcreate?debug&#61;1>threadcreate</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=trace>trace</a></td>
	</tr>

</table>
<a href="goroutine?debug=2">full goroutine stack dump</a>
<br/>
<p>
Profile Descriptions:
<ul>

<li><div class=profile-name>allocs:</div> A sampling of all past memory allocations</li>

<li><div class=profile-name>block:</div> Stack traces that led to blocking on synchronization primitives</li>

<li><div class=profile-name>cmdline:</div> The command line invocation of the current program</li>

<li><div class=profile-name>goroutine:</div> Stack traces of all current goroutines</li>

<li><div class=profile-name>heap:</div> A sampling of memory allocations of live objects. You can specify the gc GET parameter to run GC before taking the heap sample.</li>

<li><div class=profile-name>mutex:</div> Stack traces of holders of contended mutexes</li>

<li><div class=profile-name>profile:</div> CPU profile. You can specify the duration in the seconds GET parameter. After you get the profile file, use the go tool pprof command to investigate the profile.</li>

<li><div class=profile-name>threadcreate:</div> Stack traces that led to the creation of new OS threads</li>

<li><div class=profile-name>trace:</div> A trace of execution of the current program. You can specify the duration in the seconds GET parameter. After you get the trace file, use the go tool trace command to investigate the trace.</li>

</ul>
</p>
</body>
</html>

2019-07-22 12:32:20 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> HTTP Status Code : 200 <<<
2019-07-22 12:32:21 [Error] [app/scheduler/url.go:36] [app/scheduler.CheckUrl] ERROR : Get http://localhost:5678/test: dial tcp [::1]:5678: connectex: No connection could be made because the target machine actively refused it.
2019-07-22 12:32:25 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:32:25 [Trace] [app/scheduler/url.go:48] [app/scheduler.CheckUrl] <html>
<head>
<title>/debug/pprof/</title>
<style>
.profile-name{
	display:inline-block;
	width:6rem;
}
</style>
</head>
<body>
/debug/pprof/<br>
<br>
Types of profiles available:
<table>
<thead><td>Count</td><td>Profile</td></thead>

	<tr>
	<td>5</td><td><a href=allocs?debug&#61;1>allocs</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=block?debug&#61;1>block</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=cmdline>cmdline</a></td>
	</tr>

	<tr>
	<td>14</td><td><a href=goroutine?debug&#61;1>goroutine</a></td>
	</tr>

	<tr>
	<td>5</td><td><a href=heap?debug&#61;1>heap</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=mutex?debug&#61;1>mutex</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=profile>profile</a></td>
	</tr>

	<tr>
	<td>12</td><td><a href=threadcreate?debug&#61;1>threadcreate</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=trace>trace</a></td>
	</tr>

</table>
<a href="goroutine?debug=2">full goroutine stack dump</a>
<br/>
<p>
Profile Descriptions:
<ul>

<li><div class=profile-name>allocs:</div> A sampling of all past memory allocations</li>

<li><div class=profile-name>block:</div> Stack traces that led to blocking on synchronization primitives</li>

<li><div class=profile-name>cmdline:</div> The command line invocation of the current program</li>

<li><div class=profile-name>goroutine:</div> Stack traces of all current goroutines</li>

<li><div class=profile-name>heap:</div> A sampling of memory allocations of live objects. You can specify the gc GET parameter to run GC before taking the heap sample.</li>

<li><div class=profile-name>mutex:</div> Stack traces of holders of contended mutexes</li>

<li><div class=profile-name>profile:</div> CPU profile. You can specify the duration in the seconds GET parameter. After you get the profile file, use the go tool pprof command to investigate the profile.</li>

<li><div class=profile-name>threadcreate:</div> Stack traces that led to the creation of new OS threads</li>

<li><div class=profile-name>trace:</div> A trace of execution of the current program. You can specify the duration in the seconds GET parameter. After you get the trace file, use the go tool trace command to investigate the trace.</li>

</ul>
</p>
</body>
</html>

2019-07-22 12:32:25 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> HTTP Status Code : 200 <<<
2019-07-22 12:32:30 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:32:30 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:32:30 [Trace] [app/scheduler/url.go:48] [app/scheduler.CheckUrl] <html>
<head>
<title>/debug/pprof/</title>
<style>
.profile-name{
	display:inline-block;
	width:6rem;
}
</style>
</head>
<body>
/debug/pprof/<br>
<br>
Types of profiles available:
<table>
<thead><td>Count</td><td>Profile</td></thead>

	<tr>
	<td>5</td><td><a href=allocs?debug&#61;1>allocs</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=block?debug&#61;1>block</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=cmdline>cmdline</a></td>
	</tr>

	<tr>
	<td>18</td><td><a href=goroutine?debug&#61;1>goroutine</a></td>
	</tr>

	<tr>
	<td>5</td><td><a href=heap?debug&#61;1>heap</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=mutex?debug&#61;1>mutex</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=profile>profile</a></td>
	</tr>

	<tr>
	<td>12</td><td><a href=threadcreate?debug&#61;1>threadcreate</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=trace>trace</a></td>
	</tr>

</table>
<a href="goroutine?debug=2">full goroutine stack dump</a>
<br/>
<p>
Profile Descriptions:
<ul>

<li><div class=profile-name>allocs:</div> A sampling of all past memory allocations</li>

<li><div class=profile-name>block:</div> Stack traces that led to blocking on synchronization primitives</li>

<li><div class=profile-name>cmdline:</div> The command line invocation of the current program</li>

<li><div class=profile-name>goroutine:</div> Stack traces of all current goroutines</li>

<li><div class=profile-name>heap:</div> A sampling of memory allocations of live objects. You can specify the gc GET parameter to run GC before taking the heap sample.</li>

<li><div class=profile-name>mutex:</div> Stack traces of holders of contended mutexes</li>

<li><div class=profile-name>profile:</div> CPU profile. You can specify the duration in the seconds GET parameter. After you get the profile file, use the go tool pprof command to investigate the profile.</li>

<li><div class=profile-name>threadcreate:</div> Stack traces that led to the creation of new OS threads</li>

<li><div class=profile-name>trace:</div> A trace of execution of the current program. You can specify the duration in the seconds GET parameter. After you get the trace file, use the go tool trace command to investigate the trace.</li>

</ul>
</p>
</body>
</html>

2019-07-22 12:32:30 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> HTTP Status Code : 200 <<<
2019-07-22 12:32:31 [Error] [app/scheduler/url.go:36] [app/scheduler.CheckUrl] ERROR : Get http://localhost:5678/test: dial tcp [::1]:5678: connectex: No connection could be made because the target machine actively refused it.
2019-07-22 12:32:35 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:32:35 [Trace] [app/scheduler/url.go:48] [app/scheduler.CheckUrl] <html>
<head>
<title>/debug/pprof/</title>
<style>
.profile-name{
	display:inline-block;
	width:6rem;
}
</style>
</head>
<body>
/debug/pprof/<br>
<br>
Types of profiles available:
<table>
<thead><td>Count</td><td>Profile</td></thead>

	<tr>
	<td>5</td><td><a href=allocs?debug&#61;1>allocs</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=block?debug&#61;1>block</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=cmdline>cmdline</a></td>
	</tr>

	<tr>
	<td>14</td><td><a href=goroutine?debug&#61;1>goroutine</a></td>
	</tr>

	<tr>
	<td>5</td><td><a href=heap?debug&#61;1>heap</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=mutex?debug&#61;1>mutex</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=profile>profile</a></td>
	</tr>

	<tr>
	<td>12</td><td><a href=threadcreate?debug&#61;1>threadcreate</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=trace>trace</a></td>
	</tr>

</table>
<a href="goroutine?debug=2">full goroutine stack dump</a>
<br/>
<p>
Profile Descriptions:
<ul>

<li><div class=profile-name>allocs:</div> A sampling of all past memory allocations</li>

<li><div class=profile-name>block:</div> Stack traces that led to blocking on synchronization primitives</li>

<li><div class=profile-name>cmdline:</div> The command line invocation of the current program</li>

<li><div class=profile-name>goroutine:</div> Stack traces of all current goroutines</li>

<li><div class=profile-name>heap:</div> A sampling of memory allocations of live objects. You can specify the gc GET parameter to run GC before taking the heap sample.</li>

<li><div class=profile-name>mutex:</div> Stack traces of holders of contended mutexes</li>

<li><div class=profile-name>profile:</div> CPU profile. You can specify the duration in the seconds GET parameter. After you get the profile file, use the go tool pprof command to investigate the profile.</li>

<li><div class=profile-name>threadcreate:</div> Stack traces that led to the creation of new OS threads</li>

<li><div class=profile-name>trace:</div> A trace of execution of the current program. You can specify the duration in the seconds GET parameter. After you get the trace file, use the go tool trace command to investigate the trace.</li>

</ul>
</p>
</body>
</html>

2019-07-22 12:32:35 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> HTTP Status Code : 200 <<<
2019-07-22 12:32:40 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:32:40 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:32:40 [Trace] [app/scheduler/url.go:48] [app/scheduler.CheckUrl] <html>
<head>
<title>/debug/pprof/</title>
<style>
.profile-name{
	display:inline-block;
	width:6rem;
}
</style>
</head>
<body>
/debug/pprof/<br>
<br>
Types of profiles available:
<table>
<thead><td>Count</td><td>Profile</td></thead>

	<tr>
	<td>5</td><td><a href=allocs?debug&#61;1>allocs</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=block?debug&#61;1>block</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=cmdline>cmdline</a></td>
	</tr>

	<tr>
	<td>18</td><td><a href=goroutine?debug&#61;1>goroutine</a></td>
	</tr>

	<tr>
	<td>5</td><td><a href=heap?debug&#61;1>heap</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=mutex?debug&#61;1>mutex</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=profile>profile</a></td>
	</tr>

	<tr>
	<td>12</td><td><a href=threadcreate?debug&#61;1>threadcreate</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=trace>trace</a></td>
	</tr>

</table>
<a href="goroutine?debug=2">full goroutine stack dump</a>
<br/>
<p>
Profile Descriptions:
<ul>

<li><div class=profile-name>allocs:</div> A sampling of all past memory allocations</li>

<li><div class=profile-name>block:</div> Stack traces that led to blocking on synchronization primitives</li>

<li><div class=profile-name>cmdline:</div> The command line invocation of the current program</li>

<li><div class=profile-name>goroutine:</div> Stack traces of all current goroutines</li>

<li><div class=profile-name>heap:</div> A sampling of memory allocations of live objects. You can specify the gc GET parameter to run GC before taking the heap sample.</li>

<li><div class=profile-name>mutex:</div> Stack traces of holders of contended mutexes</li>

<li><div class=profile-name>profile:</div> CPU profile. You can specify the duration in the seconds GET parameter. After you get the profile file, use the go tool pprof command to investigate the profile.</li>

<li><div class=profile-name>threadcreate:</div> Stack traces that led to the creation of new OS threads</li>

<li><div class=profile-name>trace:</div> A trace of execution of the current program. You can specify the duration in the seconds GET parameter. After you get the trace file, use the go tool trace command to investigate the trace.</li>

</ul>
</p>
</body>
</html>

2019-07-22 12:32:40 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> HTTP Status Code : 200 <<<
2019-07-22 12:32:41 [Error] [app/scheduler/url.go:36] [app/scheduler.CheckUrl] ERROR : Get http://localhost:5678/test: dial tcp [::1]:5678: connectex: No connection could be made because the target machine actively refused it.
2019-07-22 12:32:45 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:32:45 [Trace] [app/scheduler/url.go:48] [app/scheduler.CheckUrl] <html>
<head>
<title>/debug/pprof/</title>
<style>
.profile-name{
	display:inline-block;
	width:6rem;
}
</style>
</head>
<body>
/debug/pprof/<br>
<br>
Types of profiles available:
<table>
<thead><td>Count</td><td>Profile</td></thead>

	<tr>
	<td>5</td><td><a href=allocs?debug&#61;1>allocs</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=block?debug&#61;1>block</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=cmdline>cmdline</a></td>
	</tr>

	<tr>
	<td>14</td><td><a href=goroutine?debug&#61;1>goroutine</a></td>
	</tr>

	<tr>
	<td>5</td><td><a href=heap?debug&#61;1>heap</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=mutex?debug&#61;1>mutex</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=profile>profile</a></td>
	</tr>

	<tr>
	<td>12</td><td><a href=threadcreate?debug&#61;1>threadcreate</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=trace>trace</a></td>
	</tr>

</table>
<a href="goroutine?debug=2">full goroutine stack dump</a>
<br/>
<p>
Profile Descriptions:
<ul>

<li><div class=profile-name>allocs:</div> A sampling of all past memory allocations</li>

<li><div class=profile-name>block:</div> Stack traces that led to blocking on synchronization primitives</li>

<li><div class=profile-name>cmdline:</div> The command line invocation of the current program</li>

<li><div class=profile-name>goroutine:</div> Stack traces of all current goroutines</li>

<li><div class=profile-name>heap:</div> A sampling of memory allocations of live objects. You can specify the gc GET parameter to run GC before taking the heap sample.</li>

<li><div class=profile-name>mutex:</div> Stack traces of holders of contended mutexes</li>

<li><div class=profile-name>profile:</div> CPU profile. You can specify the duration in the seconds GET parameter. After you get the profile file, use the go tool pprof command to investigate the profile.</li>

<li><div class=profile-name>threadcreate:</div> Stack traces that led to the creation of new OS threads</li>

<li><div class=profile-name>trace:</div> A trace of execution of the current program. You can specify the duration in the seconds GET parameter. After you get the trace file, use the go tool trace command to investigate the trace.</li>

</ul>
</p>
</body>
</html>

2019-07-22 12:32:45 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> HTTP Status Code : 200 <<<
2019-07-22 12:32:50 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:32:50 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:32:50 [Trace] [app/scheduler/url.go:48] [app/scheduler.CheckUrl] <html>
<head>
<title>/debug/pprof/</title>
<style>
.profile-name{
	display:inline-block;
	width:6rem;
}
</style>
</head>
<body>
/debug/pprof/<br>
<br>
Types of profiles available:
<table>
<thead><td>Count</td><td>Profile</td></thead>

	<tr>
	<td>5</td><td><a href=allocs?debug&#61;1>allocs</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=block?debug&#61;1>block</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=cmdline>cmdline</a></td>
	</tr>

	<tr>
	<td>18</td><td><a href=goroutine?debug&#61;1>goroutine</a></td>
	</tr>

	<tr>
	<td>5</td><td><a href=heap?debug&#61;1>heap</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=mutex?debug&#61;1>mutex</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=profile>profile</a></td>
	</tr>

	<tr>
	<td>12</td><td><a href=threadcreate?debug&#61;1>threadcreate</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=trace>trace</a></td>
	</tr>

</table>
<a href="goroutine?debug=2">full goroutine stack dump</a>
<br/>
<p>
Profile Descriptions:
<ul>

<li><div class=profile-name>allocs:</div> A sampling of all past memory allocations</li>

<li><div class=profile-name>block:</div> Stack traces that led to blocking on synchronization primitives</li>

<li><div class=profile-name>cmdline:</div> The command line invocation of the current program</li>

<li><div class=profile-name>goroutine:</div> Stack traces of all current goroutines</li>

<li><div class=profile-name>heap:</div> A sampling of memory allocations of live objects. You can specify the gc GET parameter to run GC before taking the heap sample.</li>

<li><div class=profile-name>mutex:</div> Stack traces of holders of contended mutexes</li>

<li><div class=profile-name>profile:</div> CPU profile. You can specify the duration in the seconds GET parameter. After you get the profile file, use the go tool pprof command to investigate the profile.</li>

<li><div class=profile-name>threadcreate:</div> Stack traces that led to the creation of new OS threads</li>

<li><div class=profile-name>trace:</div> A trace of execution of the current program. You can specify the duration in the seconds GET parameter. After you get the trace file, use the go tool trace command to investigate the trace.</li>

</ul>
</p>
</body>
</html>

2019-07-22 12:32:50 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> HTTP Status Code : 200 <<<
2019-07-22 12:32:51 [Error] [app/scheduler/url.go:36] [app/scheduler.CheckUrl] ERROR : Get http://localhost:5678/test: dial tcp [::1]:5678: connectex: No connection could be made because the target machine actively refused it.
2019-07-22 12:32:55 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:32:55 [Trace] [app/scheduler/url.go:48] [app/scheduler.CheckUrl] <html>
<head>
<title>/debug/pprof/</title>
<style>
.profile-name{
	display:inline-block;
	width:6rem;
}
</style>
</head>
<body>
/debug/pprof/<br>
<br>
Types of profiles available:
<table>
<thead><td>Count</td><td>Profile</td></thead>

	<tr>
	<td>5</td><td><a href=allocs?debug&#61;1>allocs</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=block?debug&#61;1>block</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=cmdline>cmdline</a></td>
	</tr>

	<tr>
	<td>14</td><td><a href=goroutine?debug&#61;1>goroutine</a></td>
	</tr>

	<tr>
	<td>5</td><td><a href=heap?debug&#61;1>heap</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=mutex?debug&#61;1>mutex</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=profile>profile</a></td>
	</tr>

	<tr>
	<td>12</td><td><a href=threadcreate?debug&#61;1>threadcreate</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=trace>trace</a></td>
	</tr>

</table>
<a href="goroutine?debug=2">full goroutine stack dump</a>
<br/>
<p>
Profile Descriptions:
<ul>

<li><div class=profile-name>allocs:</div> A sampling of all past memory allocations</li>

<li><div class=profile-name>block:</div> Stack traces that led to blocking on synchronization primitives</li>

<li><div class=profile-name>cmdline:</div> The command line invocation of the current program</li>

<li><div class=profile-name>goroutine:</div> Stack traces of all current goroutines</li>

<li><div class=profile-name>heap:</div> A sampling of memory allocations of live objects. You can specify the gc GET parameter to run GC before taking the heap sample.</li>

<li><div class=profile-name>mutex:</div> Stack traces of holders of contended mutexes</li>

<li><div class=profile-name>profile:</div> CPU profile. You can specify the duration in the seconds GET parameter. After you get the profile file, use the go tool pprof command to investigate the profile.</li>

<li><div class=profile-name>threadcreate:</div> Stack traces that led to the creation of new OS threads</li>

<li><div class=profile-name>trace:</div> A trace of execution of the current program. You can specify the duration in the seconds GET parameter. After you get the trace file, use the go tool trace command to investigate the trace.</li>

</ul>
</p>
</body>
</html>

2019-07-22 12:32:55 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> HTTP Status Code : 200 <<<
2019-07-22 12:32:59 [Info] [app/httpsvr/handler/test.go:56] [app/httpsvr/handler.NotFoundHandler] Router 404 : /favicon.ico
2019-07-22 12:32:59 [Debug] [app/httpsvr/handler/test.go:58] [app/httpsvr/handler.NotFoundHandler] Request A favicon [./assets/img/favicon.ico]
2019-07-22 12:33:00 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:33:00 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:33:00 [Trace] [app/scheduler/url.go:48] [app/scheduler.CheckUrl] <html>
<head>
<title>/debug/pprof/</title>
<style>
.profile-name{
	display:inline-block;
	width:6rem;
}
</style>
</head>
<body>
/debug/pprof/<br>
<br>
Types of profiles available:
<table>
<thead><td>Count</td><td>Profile</td></thead>

	<tr>
	<td>10</td><td><a href=allocs?debug&#61;1>allocs</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=block?debug&#61;1>block</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=cmdline>cmdline</a></td>
	</tr>

	<tr>
	<td>20</td><td><a href=goroutine?debug&#61;1>goroutine</a></td>
	</tr>

	<tr>
	<td>10</td><td><a href=heap?debug&#61;1>heap</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=mutex?debug&#61;1>mutex</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=profile>profile</a></td>
	</tr>

	<tr>
	<td>16</td><td><a href=threadcreate?debug&#61;1>threadcreate</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=trace>trace</a></td>
	</tr>

</table>
<a href="goroutine?debug=2">full goroutine stack dump</a>
<br/>
<p>
Profile Descriptions:
<ul>

<li><div class=profile-name>allocs:</div> A sampling of all past memory allocations</li>

<li><div class=profile-name>block:</div> Stack traces that led to blocking on synchronization primitives</li>

<li><div class=profile-name>cmdline:</div> The command line invocation of the current program</li>

<li><div class=profile-name>goroutine:</div> Stack traces of all current goroutines</li>

<li><div class=profile-name>heap:</div> A sampling of memory allocations of live objects. You can specify the gc GET parameter to run GC before taking the heap sample.</li>

<li><div class=profile-name>mutex:</div> Stack traces of holders of contended mutexes</li>

<li><div class=profile-name>profile:</div> CPU profile. You can specify the duration in the seconds GET parameter. After you get the profile file, use the go tool pprof command to investigate the profile.</li>

<li><div class=profile-name>threadcreate:</div> Stack traces that led to the creation of new OS threads</li>

<li><div class=profile-name>trace:</div> A trace of execution of the current program. You can specify the duration in the seconds GET parameter. After you get the trace file, use the go tool trace command to investigate the trace.</li>

</ul>
</p>
</body>
</html>

2019-07-22 12:33:00 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> HTTP Status Code : 200 <<<
2019-07-22 12:33:01 [Error] [app/scheduler/url.go:36] [app/scheduler.CheckUrl] ERROR : Get http://localhost:5678/test: dial tcp [::1]:5678: connectex: No connection could be made because the target machine actively refused it.
2019-07-22 12:33:05 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:33:05 [Trace] [app/scheduler/url.go:48] [app/scheduler.CheckUrl] <html>
<head>
<title>/debug/pprof/</title>
<style>
.profile-name{
	display:inline-block;
	width:6rem;
}
</style>
</head>
<body>
/debug/pprof/<br>
<br>
Types of profiles available:
<table>
<thead><td>Count</td><td>Profile</td></thead>

	<tr>
	<td>10</td><td><a href=allocs?debug&#61;1>allocs</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=block?debug&#61;1>block</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=cmdline>cmdline</a></td>
	</tr>

	<tr>
	<td>16</td><td><a href=goroutine?debug&#61;1>goroutine</a></td>
	</tr>

	<tr>
	<td>10</td><td><a href=heap?debug&#61;1>heap</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=mutex?debug&#61;1>mutex</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=profile>profile</a></td>
	</tr>

	<tr>
	<td>16</td><td><a href=threadcreate?debug&#61;1>threadcreate</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=trace>trace</a></td>
	</tr>

</table>
<a href="goroutine?debug=2">full goroutine stack dump</a>
<br/>
<p>
Profile Descriptions:
<ul>

<li><div class=profile-name>allocs:</div> A sampling of all past memory allocations</li>

<li><div class=profile-name>block:</div> Stack traces that led to blocking on synchronization primitives</li>

<li><div class=profile-name>cmdline:</div> The command line invocation of the current program</li>

<li><div class=profile-name>goroutine:</div> Stack traces of all current goroutines</li>

<li><div class=profile-name>heap:</div> A sampling of memory allocations of live objects. You can specify the gc GET parameter to run GC before taking the heap sample.</li>

<li><div class=profile-name>mutex:</div> Stack traces of holders of contended mutexes</li>

<li><div class=profile-name>profile:</div> CPU profile. You can specify the duration in the seconds GET parameter. After you get the profile file, use the go tool pprof command to investigate the profile.</li>

<li><div class=profile-name>threadcreate:</div> Stack traces that led to the creation of new OS threads</li>

<li><div class=profile-name>trace:</div> A trace of execution of the current program. You can specify the duration in the seconds GET parameter. After you get the trace file, use the go tool trace command to investigate the trace.</li>

</ul>
</p>
</body>
</html>

2019-07-22 12:33:05 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> HTTP Status Code : 200 <<<
2019-07-22 12:33:10 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:33:10 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:33:10 [Trace] [app/scheduler/url.go:48] [app/scheduler.CheckUrl] <html>
<head>
<title>/debug/pprof/</title>
<style>
.profile-name{
	display:inline-block;
	width:6rem;
}
</style>
</head>
<body>
/debug/pprof/<br>
<br>
Types of profiles available:
<table>
<thead><td>Count</td><td>Profile</td></thead>

	<tr>
	<td>10</td><td><a href=allocs?debug&#61;1>allocs</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=block?debug&#61;1>block</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=cmdline>cmdline</a></td>
	</tr>

	<tr>
	<td>20</td><td><a href=goroutine?debug&#61;1>goroutine</a></td>
	</tr>

	<tr>
	<td>10</td><td><a href=heap?debug&#61;1>heap</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=mutex?debug&#61;1>mutex</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=profile>profile</a></td>
	</tr>

	<tr>
	<td>16</td><td><a href=threadcreate?debug&#61;1>threadcreate</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=trace>trace</a></td>
	</tr>

</table>
<a href="goroutine?debug=2">full goroutine stack dump</a>
<br/>
<p>
Profile Descriptions:
<ul>

<li><div class=profile-name>allocs:</div> A sampling of all past memory allocations</li>

<li><div class=profile-name>block:</div> Stack traces that led to blocking on synchronization primitives</li>

<li><div class=profile-name>cmdline:</div> The command line invocation of the current program</li>

<li><div class=profile-name>goroutine:</div> Stack traces of all current goroutines</li>

<li><div class=profile-name>heap:</div> A sampling of memory allocations of live objects. You can specify the gc GET parameter to run GC before taking the heap sample.</li>

<li><div class=profile-name>mutex:</div> Stack traces of holders of contended mutexes</li>

<li><div class=profile-name>profile:</div> CPU profile. You can specify the duration in the seconds GET parameter. After you get the profile file, use the go tool pprof command to investigate the profile.</li>

<li><div class=profile-name>threadcreate:</div> Stack traces that led to the creation of new OS threads</li>

<li><div class=profile-name>trace:</div> A trace of execution of the current program. You can specify the duration in the seconds GET parameter. After you get the trace file, use the go tool trace command to investigate the trace.</li>

</ul>
</p>
</body>
</html>

2019-07-22 12:33:10 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> HTTP Status Code : 200 <<<
2019-07-22 12:33:11 [Error] [app/scheduler/url.go:36] [app/scheduler.CheckUrl] ERROR : Get http://localhost:5678/test: dial tcp [::1]:5678: connectex: No connection could be made because the target machine actively refused it.
2019-07-22 12:33:15 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:33:15 [Trace] [app/scheduler/url.go:48] [app/scheduler.CheckUrl] <html>
<head>
<title>/debug/pprof/</title>
<style>
.profile-name{
	display:inline-block;
	width:6rem;
}
</style>
</head>
<body>
/debug/pprof/<br>
<br>
Types of profiles available:
<table>
<thead><td>Count</td><td>Profile</td></thead>

	<tr>
	<td>10</td><td><a href=allocs?debug&#61;1>allocs</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=block?debug&#61;1>block</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=cmdline>cmdline</a></td>
	</tr>

	<tr>
	<td>16</td><td><a href=goroutine?debug&#61;1>goroutine</a></td>
	</tr>

	<tr>
	<td>10</td><td><a href=heap?debug&#61;1>heap</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=mutex?debug&#61;1>mutex</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=profile>profile</a></td>
	</tr>

	<tr>
	<td>16</td><td><a href=threadcreate?debug&#61;1>threadcreate</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=trace>trace</a></td>
	</tr>

</table>
<a href="goroutine?debug=2">full goroutine stack dump</a>
<br/>
<p>
Profile Descriptions:
<ul>

<li><div class=profile-name>allocs:</div> A sampling of all past memory allocations</li>

<li><div class=profile-name>block:</div> Stack traces that led to blocking on synchronization primitives</li>

<li><div class=profile-name>cmdline:</div> The command line invocation of the current program</li>

<li><div class=profile-name>goroutine:</div> Stack traces of all current goroutines</li>

<li><div class=profile-name>heap:</div> A sampling of memory allocations of live objects. You can specify the gc GET parameter to run GC before taking the heap sample.</li>

<li><div class=profile-name>mutex:</div> Stack traces of holders of contended mutexes</li>

<li><div class=profile-name>profile:</div> CPU profile. You can specify the duration in the seconds GET parameter. After you get the profile file, use the go tool pprof command to investigate the profile.</li>

<li><div class=profile-name>threadcreate:</div> Stack traces that led to the creation of new OS threads</li>

<li><div class=profile-name>trace:</div> A trace of execution of the current program. You can specify the duration in the seconds GET parameter. After you get the trace file, use the go tool trace command to investigate the trace.</li>

</ul>
</p>
</body>
</html>

2019-07-22 12:33:15 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> HTTP Status Code : 200 <<<
2019-07-22 12:33:20 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:33:20 [Trace] [app/scheduler/url.go:48] [app/scheduler.CheckUrl] <html>
<head>
<title>/debug/pprof/</title>
<style>
.profile-name{
	display:inline-block;
	width:6rem;
}
</style>
</head>
<body>
/debug/pprof/<br>
<br>
Types of profiles available:
<table>
<thead><td>Count</td><td>Profile</td></thead>

	<tr>
	<td>10</td><td><a href=allocs?debug&#61;1>allocs</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=block?debug&#61;1>block</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=cmdline>cmdline</a></td>
	</tr>

	<tr>
	<td>16</td><td><a href=goroutine?debug&#61;1>goroutine</a></td>
	</tr>

	<tr>
	<td>10</td><td><a href=heap?debug&#61;1>heap</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=mutex?debug&#61;1>mutex</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=profile>profile</a></td>
	</tr>

	<tr>
	<td>16</td><td><a href=threadcreate?debug&#61;1>threadcreate</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=trace>trace</a></td>
	</tr>

</table>
<a href="goroutine?debug=2">full goroutine stack dump</a>
<br/>
<p>
Profile Descriptions:
<ul>

<li><div class=profile-name>allocs:</div> A sampling of all past memory allocations</li>

<li><div class=profile-name>block:</div> Stack traces that led to blocking on synchronization primitives</li>

<li><div class=profile-name>cmdline:</div> The command line invocation of the current program</li>

<li><div class=profile-name>goroutine:</div> Stack traces of all current goroutines</li>

<li><div class=profile-name>heap:</div> A sampling of memory allocations of live objects. You can specify the gc GET parameter to run GC before taking the heap sample.</li>

<li><div class=profile-name>mutex:</div> Stack traces of holders of contended mutexes</li>

<li><div class=profile-name>profile:</div> CPU profile. You can specify the duration in the seconds GET parameter. After you get the profile file, use the go tool pprof command to investigate the profile.</li>

<li><div class=profile-name>threadcreate:</div> Stack traces that led to the creation of new OS threads</li>

<li><div class=profile-name>trace:</div> A trace of execution of the current program. You can specify the duration in the seconds GET parameter. After you get the trace file, use the go tool trace command to investigate the trace.</li>

</ul>
</p>
</body>
</html>

2019-07-22 12:33:20 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> HTTP Status Code : 200 <<<
2019-07-22 12:33:20 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:33:21 [Error] [app/scheduler/url.go:36] [app/scheduler.CheckUrl] ERROR : Get http://localhost:5678/test: dial tcp [::1]:5678: connectex: No connection could be made because the target machine actively refused it.
2019-07-22 12:33:25 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:33:25 [Trace] [app/scheduler/url.go:48] [app/scheduler.CheckUrl] <html>
<head>
<title>/debug/pprof/</title>
<style>
.profile-name{
	display:inline-block;
	width:6rem;
}
</style>
</head>
<body>
/debug/pprof/<br>
<br>
Types of profiles available:
<table>
<thead><td>Count</td><td>Profile</td></thead>

	<tr>
	<td>10</td><td><a href=allocs?debug&#61;1>allocs</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=block?debug&#61;1>block</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=cmdline>cmdline</a></td>
	</tr>

	<tr>
	<td>16</td><td><a href=goroutine?debug&#61;1>goroutine</a></td>
	</tr>

	<tr>
	<td>10</td><td><a href=heap?debug&#61;1>heap</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=mutex?debug&#61;1>mutex</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=profile>profile</a></td>
	</tr>

	<tr>
	<td>16</td><td><a href=threadcreate?debug&#61;1>threadcreate</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=trace>trace</a></td>
	</tr>

</table>
<a href="goroutine?debug=2">full goroutine stack dump</a>
<br/>
<p>
Profile Descriptions:
<ul>

<li><div class=profile-name>allocs:</div> A sampling of all past memory allocations</li>

<li><div class=profile-name>block:</div> Stack traces that led to blocking on synchronization primitives</li>

<li><div class=profile-name>cmdline:</div> The command line invocation of the current program</li>

<li><div class=profile-name>goroutine:</div> Stack traces of all current goroutines</li>

<li><div class=profile-name>heap:</div> A sampling of memory allocations of live objects. You can specify the gc GET parameter to run GC before taking the heap sample.</li>

<li><div class=profile-name>mutex:</div> Stack traces of holders of contended mutexes</li>

<li><div class=profile-name>profile:</div> CPU profile. You can specify the duration in the seconds GET parameter. After you get the profile file, use the go tool pprof command to investigate the profile.</li>

<li><div class=profile-name>threadcreate:</div> Stack traces that led to the creation of new OS threads</li>

<li><div class=profile-name>trace:</div> A trace of execution of the current program. You can specify the duration in the seconds GET parameter. After you get the trace file, use the go tool trace command to investigate the trace.</li>

</ul>
</p>
</body>
</html>

2019-07-22 12:33:25 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> HTTP Status Code : 200 <<<
2019-07-22 12:33:30 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:33:30 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:33:30 [Trace] [app/scheduler/url.go:48] [app/scheduler.CheckUrl] <html>
<head>
<title>/debug/pprof/</title>
<style>
.profile-name{
	display:inline-block;
	width:6rem;
}
</style>
</head>
<body>
/debug/pprof/<br>
<br>
Types of profiles available:
<table>
<thead><td>Count</td><td>Profile</td></thead>

	<tr>
	<td>10</td><td><a href=allocs?debug&#61;1>allocs</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=block?debug&#61;1>block</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=cmdline>cmdline</a></td>
	</tr>

	<tr>
	<td>20</td><td><a href=goroutine?debug&#61;1>goroutine</a></td>
	</tr>

	<tr>
	<td>10</td><td><a href=heap?debug&#61;1>heap</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=mutex?debug&#61;1>mutex</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=profile>profile</a></td>
	</tr>

	<tr>
	<td>16</td><td><a href=threadcreate?debug&#61;1>threadcreate</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=trace>trace</a></td>
	</tr>

</table>
<a href="goroutine?debug=2">full goroutine stack dump</a>
<br/>
<p>
Profile Descriptions:
<ul>

<li><div class=profile-name>allocs:</div> A sampling of all past memory allocations</li>

<li><div class=profile-name>block:</div> Stack traces that led to blocking on synchronization primitives</li>

<li><div class=profile-name>cmdline:</div> The command line invocation of the current program</li>

<li><div class=profile-name>goroutine:</div> Stack traces of all current goroutines</li>

<li><div class=profile-name>heap:</div> A sampling of memory allocations of live objects. You can specify the gc GET parameter to run GC before taking the heap sample.</li>

<li><div class=profile-name>mutex:</div> Stack traces of holders of contended mutexes</li>

<li><div class=profile-name>profile:</div> CPU profile. You can specify the duration in the seconds GET parameter. After you get the profile file, use the go tool pprof command to investigate the profile.</li>

<li><div class=profile-name>threadcreate:</div> Stack traces that led to the creation of new OS threads</li>

<li><div class=profile-name>trace:</div> A trace of execution of the current program. You can specify the duration in the seconds GET parameter. After you get the trace file, use the go tool trace command to investigate the trace.</li>

</ul>
</p>
</body>
</html>

2019-07-22 12:33:30 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> HTTP Status Code : 200 <<<
2019-07-22 12:33:31 [Error] [app/scheduler/url.go:36] [app/scheduler.CheckUrl] ERROR : Get http://localhost:5678/test: dial tcp [::1]:5678: connectex: No connection could be made because the target machine actively refused it.
2019-07-22 12:33:35 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:33:35 [Trace] [app/scheduler/url.go:48] [app/scheduler.CheckUrl] <html>
<head>
<title>/debug/pprof/</title>
<style>
.profile-name{
	display:inline-block;
	width:6rem;
}
</style>
</head>
<body>
/debug/pprof/<br>
<br>
Types of profiles available:
<table>
<thead><td>Count</td><td>Profile</td></thead>

	<tr>
	<td>10</td><td><a href=allocs?debug&#61;1>allocs</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=block?debug&#61;1>block</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=cmdline>cmdline</a></td>
	</tr>

	<tr>
	<td>16</td><td><a href=goroutine?debug&#61;1>goroutine</a></td>
	</tr>

	<tr>
	<td>10</td><td><a href=heap?debug&#61;1>heap</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=mutex?debug&#61;1>mutex</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=profile>profile</a></td>
	</tr>

	<tr>
	<td>16</td><td><a href=threadcreate?debug&#61;1>threadcreate</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=trace>trace</a></td>
	</tr>

</table>
<a href="goroutine?debug=2">full goroutine stack dump</a>
<br/>
<p>
Profile Descriptions:
<ul>

<li><div class=profile-name>allocs:</div> A sampling of all past memory allocations</li>

<li><div class=profile-name>block:</div> Stack traces that led to blocking on synchronization primitives</li>

<li><div class=profile-name>cmdline:</div> The command line invocation of the current program</li>

<li><div class=profile-name>goroutine:</div> Stack traces of all current goroutines</li>

<li><div class=profile-name>heap:</div> A sampling of memory allocations of live objects. You can specify the gc GET parameter to run GC before taking the heap sample.</li>

<li><div class=profile-name>mutex:</div> Stack traces of holders of contended mutexes</li>

<li><div class=profile-name>profile:</div> CPU profile. You can specify the duration in the seconds GET parameter. After you get the profile file, use the go tool pprof command to investigate the profile.</li>

<li><div class=profile-name>threadcreate:</div> Stack traces that led to the creation of new OS threads</li>

<li><div class=profile-name>trace:</div> A trace of execution of the current program. You can specify the duration in the seconds GET parameter. After you get the trace file, use the go tool trace command to investigate the trace.</li>

</ul>
</p>
</body>
</html>

2019-07-22 12:33:35 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> HTTP Status Code : 200 <<<
2019-07-22 12:33:40 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:33:40 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:33:40 [Trace] [app/scheduler/url.go:48] [app/scheduler.CheckUrl] <html>
<head>
<title>/debug/pprof/</title>
<style>
.profile-name{
	display:inline-block;
	width:6rem;
}
</style>
</head>
<body>
/debug/pprof/<br>
<br>
Types of profiles available:
<table>
<thead><td>Count</td><td>Profile</td></thead>

	<tr>
	<td>11</td><td><a href=allocs?debug&#61;1>allocs</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=block?debug&#61;1>block</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=cmdline>cmdline</a></td>
	</tr>

	<tr>
	<td>20</td><td><a href=goroutine?debug&#61;1>goroutine</a></td>
	</tr>

	<tr>
	<td>11</td><td><a href=heap?debug&#61;1>heap</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=mutex?debug&#61;1>mutex</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=profile>profile</a></td>
	</tr>

	<tr>
	<td>16</td><td><a href=threadcreate?debug&#61;1>threadcreate</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=trace>trace</a></td>
	</tr>

</table>
<a href="goroutine?debug=2">full goroutine stack dump</a>
<br/>
<p>
Profile Descriptions:
<ul>

<li><div class=profile-name>allocs:</div> A sampling of all past memory allocations</li>

<li><div class=profile-name>block:</div> Stack traces that led to blocking on synchronization primitives</li>

<li><div class=profile-name>cmdline:</div> The command line invocation of the current program</li>

<li><div class=profile-name>goroutine:</div> Stack traces of all current goroutines</li>

<li><div class=profile-name>heap:</div> A sampling of memory allocations of live objects. You can specify the gc GET parameter to run GC before taking the heap sample.</li>

<li><div class=profile-name>mutex:</div> Stack traces of holders of contended mutexes</li>

<li><div class=profile-name>profile:</div> CPU profile. You can specify the duration in the seconds GET parameter. After you get the profile file, use the go tool pprof command to investigate the profile.</li>

<li><div class=profile-name>threadcreate:</div> Stack traces that led to the creation of new OS threads</li>

<li><div class=profile-name>trace:</div> A trace of execution of the current program. You can specify the duration in the seconds GET parameter. After you get the trace file, use the go tool trace command to investigate the trace.</li>

</ul>
</p>
</body>
</html>

2019-07-22 12:33:40 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> HTTP Status Code : 200 <<<
2019-07-22 12:33:41 [Error] [app/scheduler/url.go:36] [app/scheduler.CheckUrl] ERROR : Get http://localhost:5678/test: dial tcp [::1]:5678: connectex: No connection could be made because the target machine actively refused it.
2019-07-22 12:33:45 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:33:45 [Trace] [app/scheduler/url.go:48] [app/scheduler.CheckUrl] <html>
<head>
<title>/debug/pprof/</title>
<style>
.profile-name{
	display:inline-block;
	width:6rem;
}
</style>
</head>
<body>
/debug/pprof/<br>
<br>
Types of profiles available:
<table>
<thead><td>Count</td><td>Profile</td></thead>

	<tr>
	<td>11</td><td><a href=allocs?debug&#61;1>allocs</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=block?debug&#61;1>block</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=cmdline>cmdline</a></td>
	</tr>

	<tr>
	<td>16</td><td><a href=goroutine?debug&#61;1>goroutine</a></td>
	</tr>

	<tr>
	<td>11</td><td><a href=heap?debug&#61;1>heap</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=mutex?debug&#61;1>mutex</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=profile>profile</a></td>
	</tr>

	<tr>
	<td>16</td><td><a href=threadcreate?debug&#61;1>threadcreate</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=trace>trace</a></td>
	</tr>

</table>
<a href="goroutine?debug=2">full goroutine stack dump</a>
<br/>
<p>
Profile Descriptions:
<ul>

<li><div class=profile-name>allocs:</div> A sampling of all past memory allocations</li>

<li><div class=profile-name>block:</div> Stack traces that led to blocking on synchronization primitives</li>

<li><div class=profile-name>cmdline:</div> The command line invocation of the current program</li>

<li><div class=profile-name>goroutine:</div> Stack traces of all current goroutines</li>

<li><div class=profile-name>heap:</div> A sampling of memory allocations of live objects. You can specify the gc GET parameter to run GC before taking the heap sample.</li>

<li><div class=profile-name>mutex:</div> Stack traces of holders of contended mutexes</li>

<li><div class=profile-name>profile:</div> CPU profile. You can specify the duration in the seconds GET parameter. After you get the profile file, use the go tool pprof command to investigate the profile.</li>

<li><div class=profile-name>threadcreate:</div> Stack traces that led to the creation of new OS threads</li>

<li><div class=profile-name>trace:</div> A trace of execution of the current program. You can specify the duration in the seconds GET parameter. After you get the trace file, use the go tool trace command to investigate the trace.</li>

</ul>
</p>
</body>
</html>

2019-07-22 12:33:45 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> HTTP Status Code : 200 <<<
2019-07-22 12:33:50 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:33:50 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:33:50 [Trace] [app/scheduler/url.go:48] [app/scheduler.CheckUrl] <html>
<head>
<title>/debug/pprof/</title>
<style>
.profile-name{
	display:inline-block;
	width:6rem;
}
</style>
</head>
<body>
/debug/pprof/<br>
<br>
Types of profiles available:
<table>
<thead><td>Count</td><td>Profile</td></thead>

	<tr>
	<td>11</td><td><a href=allocs?debug&#61;1>allocs</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=block?debug&#61;1>block</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=cmdline>cmdline</a></td>
	</tr>

	<tr>
	<td>20</td><td><a href=goroutine?debug&#61;1>goroutine</a></td>
	</tr>

	<tr>
	<td>11</td><td><a href=heap?debug&#61;1>heap</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=mutex?debug&#61;1>mutex</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=profile>profile</a></td>
	</tr>

	<tr>
	<td>16</td><td><a href=threadcreate?debug&#61;1>threadcreate</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=trace>trace</a></td>
	</tr>

</table>
<a href="goroutine?debug=2">full goroutine stack dump</a>
<br/>
<p>
Profile Descriptions:
<ul>

<li><div class=profile-name>allocs:</div> A sampling of all past memory allocations</li>

<li><div class=profile-name>block:</div> Stack traces that led to blocking on synchronization primitives</li>

<li><div class=profile-name>cmdline:</div> The command line invocation of the current program</li>

<li><div class=profile-name>goroutine:</div> Stack traces of all current goroutines</li>

<li><div class=profile-name>heap:</div> A sampling of memory allocations of live objects. You can specify the gc GET parameter to run GC before taking the heap sample.</li>

<li><div class=profile-name>mutex:</div> Stack traces of holders of contended mutexes</li>

<li><div class=profile-name>profile:</div> CPU profile. You can specify the duration in the seconds GET parameter. After you get the profile file, use the go tool pprof command to investigate the profile.</li>

<li><div class=profile-name>threadcreate:</div> Stack traces that led to the creation of new OS threads</li>

<li><div class=profile-name>trace:</div> A trace of execution of the current program. You can specify the duration in the seconds GET parameter. After you get the trace file, use the go tool trace command to investigate the trace.</li>

</ul>
</p>
</body>
</html>

2019-07-22 12:33:50 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> HTTP Status Code : 200 <<<
2019-07-22 12:33:51 [Error] [app/scheduler/url.go:36] [app/scheduler.CheckUrl] ERROR : Get http://localhost:5678/test: dial tcp [::1]:5678: connectex: No connection could be made because the target machine actively refused it.
2019-07-22 12:33:55 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:33:55 [Trace] [app/scheduler/url.go:48] [app/scheduler.CheckUrl] <html>
<head>
<title>/debug/pprof/</title>
<style>
.profile-name{
	display:inline-block;
	width:6rem;
}
</style>
</head>
<body>
/debug/pprof/<br>
<br>
Types of profiles available:
<table>
<thead><td>Count</td><td>Profile</td></thead>

	<tr>
	<td>11</td><td><a href=allocs?debug&#61;1>allocs</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=block?debug&#61;1>block</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=cmdline>cmdline</a></td>
	</tr>

	<tr>
	<td>16</td><td><a href=goroutine?debug&#61;1>goroutine</a></td>
	</tr>

	<tr>
	<td>11</td><td><a href=heap?debug&#61;1>heap</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=mutex?debug&#61;1>mutex</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=profile>profile</a></td>
	</tr>

	<tr>
	<td>16</td><td><a href=threadcreate?debug&#61;1>threadcreate</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=trace>trace</a></td>
	</tr>

</table>
<a href="goroutine?debug=2">full goroutine stack dump</a>
<br/>
<p>
Profile Descriptions:
<ul>

<li><div class=profile-name>allocs:</div> A sampling of all past memory allocations</li>

<li><div class=profile-name>block:</div> Stack traces that led to blocking on synchronization primitives</li>

<li><div class=profile-name>cmdline:</div> The command line invocation of the current program</li>

<li><div class=profile-name>goroutine:</div> Stack traces of all current goroutines</li>

<li><div class=profile-name>heap:</div> A sampling of memory allocations of live objects. You can specify the gc GET parameter to run GC before taking the heap sample.</li>

<li><div class=profile-name>mutex:</div> Stack traces of holders of contended mutexes</li>

<li><div class=profile-name>profile:</div> CPU profile. You can specify the duration in the seconds GET parameter. After you get the profile file, use the go tool pprof command to investigate the profile.</li>

<li><div class=profile-name>threadcreate:</div> Stack traces that led to the creation of new OS threads</li>

<li><div class=profile-name>trace:</div> A trace of execution of the current program. You can specify the duration in the seconds GET parameter. After you get the trace file, use the go tool trace command to investigate the trace.</li>

</ul>
</p>
</body>
</html>

2019-07-22 12:33:55 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> HTTP Status Code : 200 <<<
2019-07-22 12:34:00 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:34:00 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:34:00 [Trace] [app/scheduler/url.go:48] [app/scheduler.CheckUrl] <html>
<head>
<title>/debug/pprof/</title>
<style>
.profile-name{
	display:inline-block;
	width:6rem;
}
</style>
</head>
<body>
/debug/pprof/<br>
<br>
Types of profiles available:
<table>
<thead><td>Count</td><td>Profile</td></thead>

	<tr>
	<td>11</td><td><a href=allocs?debug&#61;1>allocs</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=block?debug&#61;1>block</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=cmdline>cmdline</a></td>
	</tr>

	<tr>
	<td>20</td><td><a href=goroutine?debug&#61;1>goroutine</a></td>
	</tr>

	<tr>
	<td>11</td><td><a href=heap?debug&#61;1>heap</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=mutex?debug&#61;1>mutex</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=profile>profile</a></td>
	</tr>

	<tr>
	<td>16</td><td><a href=threadcreate?debug&#61;1>threadcreate</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=trace>trace</a></td>
	</tr>

</table>
<a href="goroutine?debug=2">full goroutine stack dump</a>
<br/>
<p>
Profile Descriptions:
<ul>

<li><div class=profile-name>allocs:</div> A sampling of all past memory allocations</li>

<li><div class=profile-name>block:</div> Stack traces that led to blocking on synchronization primitives</li>

<li><div class=profile-name>cmdline:</div> The command line invocation of the current program</li>

<li><div class=profile-name>goroutine:</div> Stack traces of all current goroutines</li>

<li><div class=profile-name>heap:</div> A sampling of memory allocations of live objects. You can specify the gc GET parameter to run GC before taking the heap sample.</li>

<li><div class=profile-name>mutex:</div> Stack traces of holders of contended mutexes</li>

<li><div class=profile-name>profile:</div> CPU profile. You can specify the duration in the seconds GET parameter. After you get the profile file, use the go tool pprof command to investigate the profile.</li>

<li><div class=profile-name>threadcreate:</div> Stack traces that led to the creation of new OS threads</li>

<li><div class=profile-name>trace:</div> A trace of execution of the current program. You can specify the duration in the seconds GET parameter. After you get the trace file, use the go tool trace command to investigate the trace.</li>

</ul>
</p>
</body>
</html>

2019-07-22 12:34:00 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> HTTP Status Code : 200 <<<
2019-07-22 12:34:01 [Error] [app/scheduler/url.go:36] [app/scheduler.CheckUrl] ERROR : Get http://localhost:5678/test: dial tcp [::1]:5678: connectex: No connection could be made because the target machine actively refused it.
2019-07-22 12:34:05 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:34:05 [Trace] [app/scheduler/url.go:48] [app/scheduler.CheckUrl] <html>
<head>
<title>/debug/pprof/</title>
<style>
.profile-name{
	display:inline-block;
	width:6rem;
}
</style>
</head>
<body>
/debug/pprof/<br>
<br>
Types of profiles available:
<table>
<thead><td>Count</td><td>Profile</td></thead>

	<tr>
	<td>11</td><td><a href=allocs?debug&#61;1>allocs</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=block?debug&#61;1>block</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=cmdline>cmdline</a></td>
	</tr>

	<tr>
	<td>16</td><td><a href=goroutine?debug&#61;1>goroutine</a></td>
	</tr>

	<tr>
	<td>11</td><td><a href=heap?debug&#61;1>heap</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=mutex?debug&#61;1>mutex</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=profile>profile</a></td>
	</tr>

	<tr>
	<td>16</td><td><a href=threadcreate?debug&#61;1>threadcreate</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=trace>trace</a></td>
	</tr>

</table>
<a href="goroutine?debug=2">full goroutine stack dump</a>
<br/>
<p>
Profile Descriptions:
<ul>

<li><div class=profile-name>allocs:</div> A sampling of all past memory allocations</li>

<li><div class=profile-name>block:</div> Stack traces that led to blocking on synchronization primitives</li>

<li><div class=profile-name>cmdline:</div> The command line invocation of the current program</li>

<li><div class=profile-name>goroutine:</div> Stack traces of all current goroutines</li>

<li><div class=profile-name>heap:</div> A sampling of memory allocations of live objects. You can specify the gc GET parameter to run GC before taking the heap sample.</li>

<li><div class=profile-name>mutex:</div> Stack traces of holders of contended mutexes</li>

<li><div class=profile-name>profile:</div> CPU profile. You can specify the duration in the seconds GET parameter. After you get the profile file, use the go tool pprof command to investigate the profile.</li>

<li><div class=profile-name>threadcreate:</div> Stack traces that led to the creation of new OS threads</li>

<li><div class=profile-name>trace:</div> A trace of execution of the current program. You can specify the duration in the seconds GET parameter. After you get the trace file, use the go tool trace command to investigate the trace.</li>

</ul>
</p>
</body>
</html>

2019-07-22 12:34:05 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> HTTP Status Code : 200 <<<
2019-07-22 12:34:10 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:34:10 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:34:10 [Trace] [app/scheduler/url.go:48] [app/scheduler.CheckUrl] <html>
<head>
<title>/debug/pprof/</title>
<style>
.profile-name{
	display:inline-block;
	width:6rem;
}
</style>
</head>
<body>
/debug/pprof/<br>
<br>
Types of profiles available:
<table>
<thead><td>Count</td><td>Profile</td></thead>

	<tr>
	<td>11</td><td><a href=allocs?debug&#61;1>allocs</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=block?debug&#61;1>block</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=cmdline>cmdline</a></td>
	</tr>

	<tr>
	<td>20</td><td><a href=goroutine?debug&#61;1>goroutine</a></td>
	</tr>

	<tr>
	<td>11</td><td><a href=heap?debug&#61;1>heap</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=mutex?debug&#61;1>mutex</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=profile>profile</a></td>
	</tr>

	<tr>
	<td>16</td><td><a href=threadcreate?debug&#61;1>threadcreate</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=trace>trace</a></td>
	</tr>

</table>
<a href="goroutine?debug=2">full goroutine stack dump</a>
<br/>
<p>
Profile Descriptions:
<ul>

<li><div class=profile-name>allocs:</div> A sampling of all past memory allocations</li>

<li><div class=profile-name>block:</div> Stack traces that led to blocking on synchronization primitives</li>

<li><div class=profile-name>cmdline:</div> The command line invocation of the current program</li>

<li><div class=profile-name>goroutine:</div> Stack traces of all current goroutines</li>

<li><div class=profile-name>heap:</div> A sampling of memory allocations of live objects. You can specify the gc GET parameter to run GC before taking the heap sample.</li>

<li><div class=profile-name>mutex:</div> Stack traces of holders of contended mutexes</li>

<li><div class=profile-name>profile:</div> CPU profile. You can specify the duration in the seconds GET parameter. After you get the profile file, use the go tool pprof command to investigate the profile.</li>

<li><div class=profile-name>threadcreate:</div> Stack traces that led to the creation of new OS threads</li>

<li><div class=profile-name>trace:</div> A trace of execution of the current program. You can specify the duration in the seconds GET parameter. After you get the trace file, use the go tool trace command to investigate the trace.</li>

</ul>
</p>
</body>
</html>

2019-07-22 12:34:10 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> HTTP Status Code : 200 <<<
2019-07-22 12:34:11 [Error] [app/scheduler/url.go:36] [app/scheduler.CheckUrl] ERROR : Get http://localhost:5678/test: dial tcp [::1]:5678: connectex: No connection could be made because the target machine actively refused it.
2019-07-22 12:34:15 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:34:15 [Trace] [app/scheduler/url.go:48] [app/scheduler.CheckUrl] <html>
<head>
<title>/debug/pprof/</title>
<style>
.profile-name{
	display:inline-block;
	width:6rem;
}
</style>
</head>
<body>
/debug/pprof/<br>
<br>
Types of profiles available:
<table>
<thead><td>Count</td><td>Profile</td></thead>

	<tr>
	<td>11</td><td><a href=allocs?debug&#61;1>allocs</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=block?debug&#61;1>block</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=cmdline>cmdline</a></td>
	</tr>

	<tr>
	<td>16</td><td><a href=goroutine?debug&#61;1>goroutine</a></td>
	</tr>

	<tr>
	<td>11</td><td><a href=heap?debug&#61;1>heap</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=mutex?debug&#61;1>mutex</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=profile>profile</a></td>
	</tr>

	<tr>
	<td>16</td><td><a href=threadcreate?debug&#61;1>threadcreate</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=trace>trace</a></td>
	</tr>

</table>
<a href="goroutine?debug=2">full goroutine stack dump</a>
<br/>
<p>
Profile Descriptions:
<ul>

<li><div class=profile-name>allocs:</div> A sampling of all past memory allocations</li>

<li><div class=profile-name>block:</div> Stack traces that led to blocking on synchronization primitives</li>

<li><div class=profile-name>cmdline:</div> The command line invocation of the current program</li>

<li><div class=profile-name>goroutine:</div> Stack traces of all current goroutines</li>

<li><div class=profile-name>heap:</div> A sampling of memory allocations of live objects. You can specify the gc GET parameter to run GC before taking the heap sample.</li>

<li><div class=profile-name>mutex:</div> Stack traces of holders of contended mutexes</li>

<li><div class=profile-name>profile:</div> CPU profile. You can specify the duration in the seconds GET parameter. After you get the profile file, use the go tool pprof command to investigate the profile.</li>

<li><div class=profile-name>threadcreate:</div> Stack traces that led to the creation of new OS threads</li>

<li><div class=profile-name>trace:</div> A trace of execution of the current program. You can specify the duration in the seconds GET parameter. After you get the trace file, use the go tool trace command to investigate the trace.</li>

</ul>
</p>
</body>
</html>

2019-07-22 12:34:15 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> HTTP Status Code : 200 <<<
2019-07-22 12:34:20 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:34:20 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:34:20 [Trace] [app/scheduler/url.go:48] [app/scheduler.CheckUrl] <html>
<head>
<title>/debug/pprof/</title>
<style>
.profile-name{
	display:inline-block;
	width:6rem;
}
</style>
</head>
<body>
/debug/pprof/<br>
<br>
Types of profiles available:
<table>
<thead><td>Count</td><td>Profile</td></thead>

	<tr>
	<td>11</td><td><a href=allocs?debug&#61;1>allocs</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=block?debug&#61;1>block</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=cmdline>cmdline</a></td>
	</tr>

	<tr>
	<td>20</td><td><a href=goroutine?debug&#61;1>goroutine</a></td>
	</tr>

	<tr>
	<td>11</td><td><a href=heap?debug&#61;1>heap</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=mutex?debug&#61;1>mutex</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=profile>profile</a></td>
	</tr>

	<tr>
	<td>16</td><td><a href=threadcreate?debug&#61;1>threadcreate</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=trace>trace</a></td>
	</tr>

</table>
<a href="goroutine?debug=2">full goroutine stack dump</a>
<br/>
<p>
Profile Descriptions:
<ul>

<li><div class=profile-name>allocs:</div> A sampling of all past memory allocations</li>

<li><div class=profile-name>block:</div> Stack traces that led to blocking on synchronization primitives</li>

<li><div class=profile-name>cmdline:</div> The command line invocation of the current program</li>

<li><div class=profile-name>goroutine:</div> Stack traces of all current goroutines</li>

<li><div class=profile-name>heap:</div> A sampling of memory allocations of live objects. You can specify the gc GET parameter to run GC before taking the heap sample.</li>

<li><div class=profile-name>mutex:</div> Stack traces of holders of contended mutexes</li>

<li><div class=profile-name>profile:</div> CPU profile. You can specify the duration in the seconds GET parameter. After you get the profile file, use the go tool pprof command to investigate the profile.</li>

<li><div class=profile-name>threadcreate:</div> Stack traces that led to the creation of new OS threads</li>

<li><div class=profile-name>trace:</div> A trace of execution of the current program. You can specify the duration in the seconds GET parameter. After you get the trace file, use the go tool trace command to investigate the trace.</li>

</ul>
</p>
</body>
</html>

2019-07-22 12:34:20 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> HTTP Status Code : 200 <<<
2019-07-22 12:34:21 [Error] [app/scheduler/url.go:36] [app/scheduler.CheckUrl] ERROR : Get http://localhost:5678/test: dial tcp [::1]:5678: connectex: No connection could be made because the target machine actively refused it.
2019-07-22 12:34:25 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:34:25 [Trace] [app/scheduler/url.go:48] [app/scheduler.CheckUrl] <html>
<head>
<title>/debug/pprof/</title>
<style>
.profile-name{
	display:inline-block;
	width:6rem;
}
</style>
</head>
<body>
/debug/pprof/<br>
<br>
Types of profiles available:
<table>
<thead><td>Count</td><td>Profile</td></thead>

	<tr>
	<td>11</td><td><a href=allocs?debug&#61;1>allocs</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=block?debug&#61;1>block</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=cmdline>cmdline</a></td>
	</tr>

	<tr>
	<td>16</td><td><a href=goroutine?debug&#61;1>goroutine</a></td>
	</tr>

	<tr>
	<td>11</td><td><a href=heap?debug&#61;1>heap</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=mutex?debug&#61;1>mutex</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=profile>profile</a></td>
	</tr>

	<tr>
	<td>16</td><td><a href=threadcreate?debug&#61;1>threadcreate</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=trace>trace</a></td>
	</tr>

</table>
<a href="goroutine?debug=2">full goroutine stack dump</a>
<br/>
<p>
Profile Descriptions:
<ul>

<li><div class=profile-name>allocs:</div> A sampling of all past memory allocations</li>

<li><div class=profile-name>block:</div> Stack traces that led to blocking on synchronization primitives</li>

<li><div class=profile-name>cmdline:</div> The command line invocation of the current program</li>

<li><div class=profile-name>goroutine:</div> Stack traces of all current goroutines</li>

<li><div class=profile-name>heap:</div> A sampling of memory allocations of live objects. You can specify the gc GET parameter to run GC before taking the heap sample.</li>

<li><div class=profile-name>mutex:</div> Stack traces of holders of contended mutexes</li>

<li><div class=profile-name>profile:</div> CPU profile. You can specify the duration in the seconds GET parameter. After you get the profile file, use the go tool pprof command to investigate the profile.</li>

<li><div class=profile-name>threadcreate:</div> Stack traces that led to the creation of new OS threads</li>

<li><div class=profile-name>trace:</div> A trace of execution of the current program. You can specify the duration in the seconds GET parameter. After you get the trace file, use the go tool trace command to investigate the trace.</li>

</ul>
</p>
</body>
</html>

2019-07-22 12:34:25 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> HTTP Status Code : 200 <<<
2019-07-22 12:34:30 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:34:30 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:34:30 [Trace] [app/scheduler/url.go:48] [app/scheduler.CheckUrl] <html>
<head>
<title>/debug/pprof/</title>
<style>
.profile-name{
	display:inline-block;
	width:6rem;
}
</style>
</head>
<body>
/debug/pprof/<br>
<br>
Types of profiles available:
<table>
<thead><td>Count</td><td>Profile</td></thead>

	<tr>
	<td>11</td><td><a href=allocs?debug&#61;1>allocs</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=block?debug&#61;1>block</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=cmdline>cmdline</a></td>
	</tr>

	<tr>
	<td>19</td><td><a href=goroutine?debug&#61;1>goroutine</a></td>
	</tr>

	<tr>
	<td>11</td><td><a href=heap?debug&#61;1>heap</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=mutex?debug&#61;1>mutex</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=profile>profile</a></td>
	</tr>

	<tr>
	<td>16</td><td><a href=threadcreate?debug&#61;1>threadcreate</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=trace>trace</a></td>
	</tr>

</table>
<a href="goroutine?debug=2">full goroutine stack dump</a>
<br/>
<p>
Profile Descriptions:
<ul>

<li><div class=profile-name>allocs:</div> A sampling of all past memory allocations</li>

<li><div class=profile-name>block:</div> Stack traces that led to blocking on synchronization primitives</li>

<li><div class=profile-name>cmdline:</div> The command line invocation of the current program</li>

<li><div class=profile-name>goroutine:</div> Stack traces of all current goroutines</li>

<li><div class=profile-name>heap:</div> A sampling of memory allocations of live objects. You can specify the gc GET parameter to run GC before taking the heap sample.</li>

<li><div class=profile-name>mutex:</div> Stack traces of holders of contended mutexes</li>

<li><div class=profile-name>profile:</div> CPU profile. You can specify the duration in the seconds GET parameter. After you get the profile file, use the go tool pprof command to investigate the profile.</li>

<li><div class=profile-name>threadcreate:</div> Stack traces that led to the creation of new OS threads</li>

<li><div class=profile-name>trace:</div> A trace of execution of the current program. You can specify the duration in the seconds GET parameter. After you get the trace file, use the go tool trace command to investigate the trace.</li>

</ul>
</p>
</body>
</html>

2019-07-22 12:34:30 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> HTTP Status Code : 200 <<<
2019-07-22 12:34:31 [Error] [app/scheduler/url.go:36] [app/scheduler.CheckUrl] ERROR : Get http://localhost:5678/test: dial tcp [::1]:5678: connectex: No connection could be made because the target machine actively refused it.
2019-07-22 12:34:31 [Info] [app/httpsvr/handler/test.go:21] [app/httpsvr/handler.TestHandler] Router Test : /test
2019-07-22 12:34:35 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:34:35 [Trace] [app/scheduler/url.go:48] [app/scheduler.CheckUrl] <html>
<head>
<title>/debug/pprof/</title>
<style>
.profile-name{
	display:inline-block;
	width:6rem;
}
</style>
</head>
<body>
/debug/pprof/<br>
<br>
Types of profiles available:
<table>
<thead><td>Count</td><td>Profile</td></thead>

	<tr>
	<td>13</td><td><a href=allocs?debug&#61;1>allocs</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=block?debug&#61;1>block</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=cmdline>cmdline</a></td>
	</tr>

	<tr>
	<td>17</td><td><a href=goroutine?debug&#61;1>goroutine</a></td>
	</tr>

	<tr>
	<td>13</td><td><a href=heap?debug&#61;1>heap</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=mutex?debug&#61;1>mutex</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=profile>profile</a></td>
	</tr>

	<tr>
	<td>16</td><td><a href=threadcreate?debug&#61;1>threadcreate</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=trace>trace</a></td>
	</tr>

</table>
<a href="goroutine?debug=2">full goroutine stack dump</a>
<br/>
<p>
Profile Descriptions:
<ul>

<li><div class=profile-name>allocs:</div> A sampling of all past memory allocations</li>

<li><div class=profile-name>block:</div> Stack traces that led to blocking on synchronization primitives</li>

<li><div class=profile-name>cmdline:</div> The command line invocation of the current program</li>

<li><div class=profile-name>goroutine:</div> Stack traces of all current goroutines</li>

<li><div class=profile-name>heap:</div> A sampling of memory allocations of live objects. You can specify the gc GET parameter to run GC before taking the heap sample.</li>

<li><div class=profile-name>mutex:</div> Stack traces of holders of contended mutexes</li>

<li><div class=profile-name>profile:</div> CPU profile. You can specify the duration in the seconds GET parameter. After you get the profile file, use the go tool pprof command to investigate the profile.</li>

<li><div class=profile-name>threadcreate:</div> Stack traces that led to the creation of new OS threads</li>

<li><div class=profile-name>trace:</div> A trace of execution of the current program. You can specify the duration in the seconds GET parameter. After you get the trace file, use the go tool trace command to investigate the trace.</li>

</ul>
</p>
</body>
</html>

2019-07-22 12:34:35 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> HTTP Status Code : 200 <<<
2019-07-22 12:34:40 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:34:40 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:34:40 [Trace] [app/scheduler/url.go:48] [app/scheduler.CheckUrl] <html>
<head>
<title>/debug/pprof/</title>
<style>
.profile-name{
	display:inline-block;
	width:6rem;
}
</style>
</head>
<body>
/debug/pprof/<br>
<br>
Types of profiles available:
<table>
<thead><td>Count</td><td>Profile</td></thead>

	<tr>
	<td>13</td><td><a href=allocs?debug&#61;1>allocs</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=block?debug&#61;1>block</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=cmdline>cmdline</a></td>
	</tr>

	<tr>
	<td>19</td><td><a href=goroutine?debug&#61;1>goroutine</a></td>
	</tr>

	<tr>
	<td>13</td><td><a href=heap?debug&#61;1>heap</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=mutex?debug&#61;1>mutex</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=profile>profile</a></td>
	</tr>

	<tr>
	<td>16</td><td><a href=threadcreate?debug&#61;1>threadcreate</a></td>
	</tr>

	<tr>
	<td>0</td><td><a href=trace>trace</a></td>
	</tr>

</table>
<a href="goroutine?debug=2">full goroutine stack dump</a>
<br/>
<p>
Profile Descriptions:
<ul>

<li><div class=profile-name>allocs:</div> A sampling of all past memory allocations</li>

<li><div class=profile-name>block:</div> Stack traces that led to blocking on synchronization primitives</li>

<li><div class=profile-name>cmdline:</div> The command line invocation of the current program</li>

<li><div class=profile-name>goroutine:</div> Stack traces of all current goroutines</li>

<li><div class=profile-name>heap:</div> A sampling of memory allocations of live objects. You can specify the gc GET parameter to run GC before taking the heap sample.</li>

<li><div class=profile-name>mutex:</div> Stack traces of holders of contended mutexes</li>

<li><div class=profile-name>profile:</div> CPU profile. You can specify the duration in the seconds GET parameter. After you get the profile file, use the go tool pprof command to investigate the profile.</li>

<li><div class=profile-name>threadcreate:</div> Stack traces that led to the creation of new OS threads</li>

<li><div class=profile-name>trace:</div> A trace of execution of the current program. You can specify the duration in the seconds GET parameter. After you get the trace file, use the go tool trace command to investigate the trace.</li>

</ul>
</p>
</body>
</html>

2019-07-22 12:34:40 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> HTTP Status Code : 200 <<<
2019-07-22 12:34:41 [Error] [app/scheduler/url.go:36] [app/scheduler.CheckUrl] ERROR : Get http://localhost:5678/test: dial tcp [::1]:5678: connectex: No connection could be made because the target machine actively refused it.
2019-07-22 12:35:57 [Info] [main.go:41] [main.main] Initialize Logger ... Success !
2019-07-22 12:35:57 [Info] [main.go:50] [main.main] Load Configuration ... Success !
2019-07-22 12:35:57 [Debug] [app/utils/dbController.go:22] [app/utils.InitDB] Database Type : [sqlite3], Connect String : [./data/database/eccagent.db]
2019-07-22 12:35:57 [Info] [main.go:62] [main.main] Connect Database ... Success !
2019-07-22 12:35:57 [Debug] [app/scheduler/cron.go:27] [app/scheduler.InitCron] Cron Job 0 : {1 检查http://localhost:5678/test URL */10 * * * * *  http://localhost:5678/test  启用 http://localhost:5678/test}
2019-07-22 12:35:57 [Trace] [app/scheduler/cron.go:65] [app/scheduler.InitCron] URL
2019-07-22 12:35:57 [Debug] [app/scheduler/cron.go:27] [app/scheduler.InitCron] Cron Job 1 : {2 检查http://localhost:9999/debug/pprof URL */5 * * * * *  http://localhost:9999/debug/pprof  启用 http://localhost:9999/debug/pprof}
2019-07-22 12:35:57 [Trace] [app/scheduler/cron.go:65] [app/scheduler.InitCron] URL
2019-07-22 12:35:57 [Info] [main.go:72] [main.main] Start Cron ... Success !
2019-07-22 12:35:57 [Info] [main.go:73] [main.main] 5 -> Starting HTTP Server !
2019-07-22 12:35:57 [Info] [main.go:75] [main.main] ***Everything is OK !***
2019-07-22 12:35:57 [Info] [app/httpsvr/server.go:23] [app/httpsvr.StartHTTP] Initialize HTTP Routers Success !
2019-07-22 12:35:57 [Info] [app/httpsvr/server.go:30] [app/httpsvr.StartHTTP] Listen HTTP Port And Serve ...
2019-07-22 12:36:00 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:36:00 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:36:00 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> Check [http://localhost:9999/debug/pprof] Status Code : 200 <<<
2019-07-22 12:36:01 [Error] [app/scheduler/url.go:36] [app/scheduler.CheckUrl] ERROR : Get http://localhost:5678/test: dial tcp [::1]:5678: connectex: No connection could be made because the target machine actively refused it.
2019-07-22 12:36:05 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:36:05 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> Check [http://localhost:9999/debug/pprof] Status Code : 200 <<<
2019-07-22 12:36:10 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:36:10 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:36:10 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> Check [http://localhost:9999/debug/pprof] Status Code : 200 <<<
2019-07-22 12:36:11 [Error] [app/scheduler/url.go:36] [app/scheduler.CheckUrl] ERROR : Get http://localhost:5678/test: dial tcp [::1]:5678: connectex: No connection could be made because the target machine actively refused it.
2019-07-22 12:36:15 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:36:15 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> Check [http://localhost:9999/debug/pprof] Status Code : 200 <<<
2019-07-22 12:36:20 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:36:20 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:36:20 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> Check [http://localhost:9999/debug/pprof] Status Code : 200 <<<
2019-07-22 12:36:21 [Error] [app/scheduler/url.go:36] [app/scheduler.CheckUrl] ERROR : Get http://localhost:5678/test: dial tcp [::1]:5678: connectex: No connection could be made because the target machine actively refused it.
2019-07-22 12:36:25 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:36:25 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> Check [http://localhost:9999/debug/pprof] Status Code : 200 <<<
2019-07-22 12:36:30 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:36:30 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:36:30 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> Check [http://localhost:9999/debug/pprof] Status Code : 200 <<<
2019-07-22 12:36:31 [Error] [app/scheduler/url.go:36] [app/scheduler.CheckUrl] ERROR : Get http://localhost:5678/test: dial tcp [::1]:5678: connectex: No connection could be made because the target machine actively refused it.
2019-07-22 12:36:35 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:36:35 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> Check [http://localhost:9999/debug/pprof] Status Code : 200 <<<
2019-07-22 12:36:40 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:36:40 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:36:40 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> Check [http://localhost:9999/debug/pprof] Status Code : 200 <<<
2019-07-22 12:36:41 [Error] [app/scheduler/url.go:36] [app/scheduler.CheckUrl] ERROR : Get http://localhost:5678/test: dial tcp [::1]:5678: connectex: No connection could be made because the target machine actively refused it.
2019-07-22 12:36:45 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:36:45 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> Check [http://localhost:9999/debug/pprof] Status Code : 200 <<<
2019-07-22 12:36:50 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:36:50 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> Check [http://localhost:9999/debug/pprof] Status Code : 200 <<<
2019-07-22 12:36:50 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:36:51 [Error] [app/scheduler/url.go:36] [app/scheduler.CheckUrl] ERROR : Get http://localhost:5678/test: dial tcp [::1]:5678: connectex: No connection could be made because the target machine actively refused it.
2019-07-22 12:36:55 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:36:55 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> Check [http://localhost:9999/debug/pprof] Status Code : 200 <<<
2019-07-22 12:37:00 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:37:00 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:37:00 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> Check [http://localhost:9999/debug/pprof] Status Code : 200 <<<
2019-07-22 12:37:01 [Error] [app/scheduler/url.go:36] [app/scheduler.CheckUrl] ERROR : Get http://localhost:5678/test: dial tcp [::1]:5678: connectex: No connection could be made because the target machine actively refused it.
2019-07-22 12:37:05 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:37:05 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> Check [http://localhost:9999/debug/pprof] Status Code : 200 <<<
2019-07-22 12:37:10 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:37:10 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:37:10 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> Check [http://localhost:9999/debug/pprof] Status Code : 200 <<<
2019-07-22 12:37:11 [Error] [app/scheduler/url.go:36] [app/scheduler.CheckUrl] ERROR : Get http://localhost:5678/test: dial tcp [::1]:5678: connectex: No connection could be made because the target machine actively refused it.
2019-07-22 12:37:15 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:37:15 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> Check [http://localhost:9999/debug/pprof] Status Code : 200 <<<
2019-07-22 12:37:20 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:37:20 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> Check [http://localhost:9999/debug/pprof] Status Code : 200 <<<
2019-07-22 12:37:20 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:37:21 [Error] [app/scheduler/url.go:36] [app/scheduler.CheckUrl] ERROR : Get http://localhost:5678/test: dial tcp [::1]:5678: connectex: No connection could be made because the target machine actively refused it.
2019-07-22 12:37:25 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:37:25 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> Check [http://localhost:9999/debug/pprof] Status Code : 200 <<<
2019-07-22 12:37:30 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:37:30 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:37:30 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> Check [http://localhost:9999/debug/pprof] Status Code : 200 <<<
2019-07-22 12:37:31 [Error] [app/scheduler/url.go:36] [app/scheduler.CheckUrl] ERROR : Get http://localhost:5678/test: dial tcp [::1]:5678: connectex: No connection could be made because the target machine actively refused it.
2019-07-22 12:37:35 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:37:35 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> Check [http://localhost:9999/debug/pprof] Status Code : 200 <<<
2019-07-22 12:37:40 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:37:40 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> Check [http://localhost:9999/debug/pprof] Status Code : 200 <<<
2019-07-22 12:37:40 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:37:41 [Error] [app/scheduler/url.go:36] [app/scheduler.CheckUrl] ERROR : Get http://localhost:5678/test: dial tcp [::1]:5678: connectex: No connection could be made because the target machine actively refused it.
2019-07-22 12:37:45 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:37:45 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> Check [http://localhost:9999/debug/pprof] Status Code : 200 <<<
2019-07-22 12:37:50 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:37:50 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:37:50 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> Check [http://localhost:9999/debug/pprof] Status Code : 200 <<<
2019-07-22 12:37:51 [Error] [app/scheduler/url.go:36] [app/scheduler.CheckUrl] ERROR : Get http://localhost:5678/test: dial tcp [::1]:5678: connectex: No connection could be made because the target machine actively refused it.
2019-07-22 12:37:55 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:37:55 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> Check [http://localhost:9999/debug/pprof] Status Code : 200 <<<
2019-07-22 12:38:00 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:38:00 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:38:00 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> Check [http://localhost:9999/debug/pprof] Status Code : 200 <<<
2019-07-22 12:38:01 [Error] [app/scheduler/url.go:36] [app/scheduler.CheckUrl] ERROR : Get http://localhost:5678/test: dial tcp [::1]:5678: connectex: No connection could be made because the target machine actively refused it.
2019-07-22 12:38:05 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:38:05 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> Check [http://localhost:9999/debug/pprof] Status Code : 200 <<<
2019-07-22 12:38:10 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:38:10 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:38:10 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> Check [http://localhost:9999/debug/pprof] Status Code : 200 <<<
2019-07-22 12:38:11 [Error] [app/scheduler/url.go:36] [app/scheduler.CheckUrl] ERROR : Get http://localhost:5678/test: dial tcp [::1]:5678: connectex: No connection could be made because the target machine actively refused it.
2019-07-22 12:38:15 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:38:15 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> Check [http://localhost:9999/debug/pprof] Status Code : 200 <<<
2019-07-22 12:38:20 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:38:20 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:38:20 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> Check [http://localhost:9999/debug/pprof] Status Code : 200 <<<
2019-07-22 12:38:21 [Error] [app/scheduler/url.go:36] [app/scheduler.CheckUrl] ERROR : Get http://localhost:5678/test: dial tcp [::1]:5678: connectex: No connection could be made because the target machine actively refused it.
2019-07-22 12:38:25 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:38:25 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> Check [http://localhost:9999/debug/pprof] Status Code : 200 <<<
2019-07-22 12:38:30 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:38:30 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:38:30 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> Check [http://localhost:9999/debug/pprof] Status Code : 200 <<<
2019-07-22 12:38:31 [Error] [app/scheduler/url.go:36] [app/scheduler.CheckUrl] ERROR : Get http://localhost:5678/test: dial tcp [::1]:5678: connectex: No connection could be made because the target machine actively refused it.
2019-07-22 12:38:35 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:38:35 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> Check [http://localhost:9999/debug/pprof] Status Code : 200 <<<
2019-07-22 12:38:40 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:38:40 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:38:40 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> Check [http://localhost:9999/debug/pprof] Status Code : 200 <<<
2019-07-22 12:38:41 [Error] [app/scheduler/url.go:36] [app/scheduler.CheckUrl] ERROR : Get http://localhost:5678/test: dial tcp [::1]:5678: connectex: No connection could be made because the target machine actively refused it.
2019-07-22 12:38:45 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:38:45 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> Check [http://localhost:9999/debug/pprof] Status Code : 200 <<<
2019-07-22 12:38:50 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:38:50 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:38:50 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> Check [http://localhost:9999/debug/pprof] Status Code : 200 <<<
2019-07-22 12:38:51 [Error] [app/scheduler/url.go:36] [app/scheduler.CheckUrl] ERROR : Get http://localhost:5678/test: dial tcp [::1]:5678: connectex: No connection could be made because the target machine actively refused it.
2019-07-22 12:38:55 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:38:55 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> Check [http://localhost:9999/debug/pprof] Status Code : 200 <<<
2019-07-22 12:39:00 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:39:00 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:39:00 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> Check [http://localhost:9999/debug/pprof] Status Code : 200 <<<
2019-07-22 12:39:01 [Error] [app/scheduler/url.go:36] [app/scheduler.CheckUrl] ERROR : Get http://localhost:5678/test: dial tcp [::1]:5678: connectex: No connection could be made because the target machine actively refused it.
2019-07-22 12:39:05 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:39:05 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> Check [http://localhost:9999/debug/pprof] Status Code : 200 <<<
2019-07-22 12:39:10 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:39:10 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:39:10 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> Check [http://localhost:9999/debug/pprof] Status Code : 200 <<<
2019-07-22 12:39:11 [Error] [app/scheduler/url.go:36] [app/scheduler.CheckUrl] ERROR : Get http://localhost:5678/test: dial tcp [::1]:5678: connectex: No connection could be made because the target machine actively refused it.
2019-07-22 12:39:15 [Info] [app/scheduler/url.go:18] [app/scheduler.CheckUrl] InitClient begin ...
2019-07-22 12:39:15 [Info] [app/scheduler/url.go:50] [app/scheduler.CheckUrl] >>> Check [http://localhost:9999/debug/pprof] Status Code : 200 <<<
